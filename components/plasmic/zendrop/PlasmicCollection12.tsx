// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4UKWsAMfUC1kEuLgBvknC
// Component: 2AKj2rj7voom

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Offer1 from "../../Offer1"; // plasmic-import: 0h33b82XzEHG/component
import Collection1 from "../../Collection1"; // plasmic-import: _5P11KHEm1uX/component
import Collection1Cta from "../../Collection1Cta"; // plasmic-import: xEFhD8NQ6OYB/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent

import { useScreenVariants as useScreenVariantsjZPl8KLomlJe } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jZPl8KLomlJe/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_zendrop.module.css"; // plasmic-import: 4UKWsAMfUC1kEuLgBvknC/projectcss
import sty from "./PlasmicCollection12.module.css"; // plasmic-import: 2AKj2rj7voom/css

createPlasmicElementProxy;

export type PlasmicCollection12__VariantMembers = {};
export type PlasmicCollection12__VariantsArgs = {};
type VariantPropType = keyof PlasmicCollection12__VariantsArgs;
export const PlasmicCollection12__VariantProps = new Array<VariantPropType>();

export type PlasmicCollection12__ArgsType = {};
type ArgPropType = keyof PlasmicCollection12__ArgsType;
export const PlasmicCollection12__ArgProps = new Array<ArgPropType>();

export type PlasmicCollection12__OverridesType = {
  root?: p.Flex<"div">;
  logo?: p.Flex<typeof p.PlasmicImg>;
  hiconsH1?: p.Flex<"div">;
  hiconsIcon1?: p.Flex<typeof p.PlasmicImg>;
  hiconsLabel1?: p.Flex<"div">;
  hiconsIcon2?: p.Flex<typeof p.PlasmicImg>;
  hiconsLabel2?: p.Flex<"div">;
  hiconsIcon3?: p.Flex<typeof p.PlasmicImg>;
  hiconsIcon4?: p.Flex<"div">;
  hiconsIcon5?: p.Flex<typeof p.PlasmicImg>;
  hiconsIcon6?: p.Flex<"div">;
  offer?: p.Flex<"div">;
  offer1?: p.Flex<typeof Offer1>;
  offerImage?: p.Flex<typeof p.PlasmicImg>;
  offerVariant1Url?: p.Flex<"a"> & Partial<LinkProps>;
  offerVariant1Image?: p.Flex<typeof p.PlasmicImg>;
  offerVariant1Label?: p.Flex<"div">;
  offerVariant2Url?: p.Flex<"a"> & Partial<LinkProps>;
  offerVariant2Image?: p.Flex<typeof p.PlasmicImg>;
  offerVariant2Label?: p.Flex<"div">;
  offerH1?: p.Flex<"div">;
  offerH2?: p.Flex<"div">;
  offerParagraph?: p.Flex<"div">;
  offerCta?: p.Flex<"div">;
  products?: p.Flex<"div">;
  embedHtml?: p.Flex<typeof Embed>;
};

export interface DefaultCollection12Props {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCollection12__RenderFunc(props: {
  variants: PlasmicCollection12__VariantsArgs;
  args: PlasmicCollection12__ArgsType;
  overrides: PlasmicCollection12__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjZPl8KLomlJe()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__jzICa)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__uFfEq
          )}
        >
          <React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ color: "#FFFFFF" }}
            >
              {"FREE SHIPPING ON ORDERS OVER $65"}
            </span>
          </React.Fragment>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___0N25I)}>
        <div className={classNames(projectcss.all, sty.freeBox__gGEyA)}>
          {true ? (
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__t3UuB
              )}
              component={Link}
              href={"https://www.sparqlife.com/discount/QUIT15" as const}
              platform={"nextjs"}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__mj4Nk
                  )}
                  component={Link}
                  href={"https://www.sparqlife.com/discount/QUIT15" as const}
                  platform={"nextjs"}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__jrvhV)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"13px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/zendrop/images/navsvg.svg",
                      fullWidth: 102,
                      fullHeight: 150,
                      aspectRatio: 0.677419
                    }}
                  />
                </p.PlasmicLink>
              ) : null}
              <p.PlasmicImg
                data-plasmic-name={"logo"}
                data-plasmic-override={overrides.logo}
                alt={""}
                className={classNames(sty.logo)}
                displayHeight={"auto" as const}
                displayMaxHeight={"50px" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"125px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/logopng.png",
                  fullWidth: 276,
                  fullHeight: 46,
                  aspectRatio: undefined
                }}
              />

              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__bOv9G
                  )}
                  component={Link}
                  href={
                    "https://www.sparqlife.com/discount/QUIT15?redirect=/collections/rechargeable" as const
                  }
                  platform={"nextjs"}
                >
                  {"RECHARGABLE"}
                </p.PlasmicLink>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__xsmqI
                  )}
                  component={Link}
                  href={
                    "https://www.sparqlife.com/discount/QUIT15?redirect=/collections/all" as const
                  }
                  platform={"nextjs"}
                >
                  {"DISPOSABLE"}
                </p.PlasmicLink>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__lpx4V
                  )}
                  component={Link}
                  href={
                    "https://www.sparqlife.com/discount/QUIT15?redirect=/collections/volume-buying" as const
                  }
                  platform={"nextjs"}
                >
                  {"BULK BUYING"}
                </p.PlasmicLink>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__vwjB8
                  )}
                  component={Link}
                  href={
                    "https://www.sparqlife.com/discount/QUIT15?redirect=/pages/our-story" as const
                  }
                  platform={"nextjs"}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#000000" }}
                    >
                      {"AUTO-SHIP"}
                    </span>
                  </React.Fragment>
                </p.PlasmicLink>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__jqt9X
                  )}
                  component={Link}
                  href={
                    "https://www.sparqlife.com/discount/QUIT15?redirect=/pages/pod-subscription" as const
                  }
                  platform={"nextjs"}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#000000" }}
                    >
                      {"ABOUT"}
                    </span>
                  </React.Fragment>
                </p.PlasmicLink>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__sip6D
                  )}
                  component={Link}
                  href={
                    "https://www.sparqlife.com/discount/QUIT15?redirect=/pages/loyalty-referral-program" as const
                  }
                  platform={"nextjs"}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#000000" }}
                    >
                      {"REWARDS"}
                    </span>
                  </React.Fragment>
                </p.PlasmicLink>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___7WOqD
                  )}
                  component={Link}
                  href={"https://www.sparqlife.com/account/login" as const}
                  platform={"nextjs"}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#000000" }}
                    >
                      {"LOGIN"}
                    </span>
                  </React.Fragment>
                </p.PlasmicLink>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__dfIk4
                  )}
                  component={Link}
                  href={"https://www.sparqlife.com/account/register" as const}
                  platform={"nextjs"}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#000000" }}
                    >
                      {"LOGIN"}
                    </span>
                  </React.Fragment>
                </p.PlasmicLink>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__zPvLp
                  )}
                  component={Link}
                  href={"https://www.sparqlife.com/cart" as const}
                  platform={"nextjs"}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#93896A" }}
                    >
                      {"CART"}
                    </span>
                  </React.Fragment>
                </p.PlasmicLink>
              ) : null}
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__gunxY
                )}
                component={Link}
                href={"https://www.sparqlife.com/cart" as const}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__aeplv)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"13px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/zendrop/images/cartsvg.svg",
                    fullWidth: 134,
                    fullHeight: 150,
                    aspectRatio: 0.894737
                  }}
                />
              </p.PlasmicLink>
            </p.PlasmicLink>
          ) : null}
        </div>
      </div>
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__lX5Gn)}>
          <div
            data-plasmic-name={"hiconsH1"}
            data-plasmic-override={overrides.hiconsH1}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.hiconsH1
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $ctx.fetchDyanamicData.records[0].fields.hicons_h1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "BREATHE VITAMIN AIR®";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__ebt0B)}>
            <div className={classNames(projectcss.all, sty.freeBox__v9Qsz)}>
              <p.PlasmicImg
                data-plasmic-name={"hiconsIcon1"}
                data-plasmic-override={overrides.hiconsIcon1}
                alt={""}
                className={classNames(sty.hiconsIcon1)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("32px" as const)
                    : ("45px" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("32px" as const)
                    : ("45px" as const)
                }
                loading={"lazy" as const}
                src={(() => {
                  try {
                    return $ctx.fetchDyanamicData.records[0].fields
                      .hicons_icon1[0].url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/6e42147b488b5ca87759208eede507e2.png";
                    }
                    throw e;
                  }
                })()}
              />

              <div
                data-plasmic-name={"hiconsLabel1"}
                data-plasmic-override={overrides.hiconsLabel1}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.hiconsLabel1
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchDyanamicData.records[0].fields
                        .hicons_label_1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "0% Nicotine";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__uyHUl)}>
              <p.PlasmicImg
                data-plasmic-name={"hiconsIcon2"}
                data-plasmic-override={overrides.hiconsIcon2}
                alt={""}
                className={classNames(sty.hiconsIcon2)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("32px" as const)
                    : ("45px" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("32px" as const)
                    : ("45px" as const)
                }
                loading={"lazy" as const}
                src={(() => {
                  try {
                    return $ctx.fetchDyanamicData.records[0].fields
                      .hicons_icon_2[0].url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/9d995ea0affc51c4faaeacafd85b5294.png";
                    }
                    throw e;
                  }
                })()}
              />

              <div
                data-plasmic-name={"hiconsLabel2"}
                data-plasmic-override={overrides.hiconsLabel2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.hiconsLabel2
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchDyanamicData.records[0].fields
                        .hicons_label_2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Lab-Tested";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__oUb8O)}>
              <p.PlasmicImg
                data-plasmic-name={"hiconsIcon3"}
                data-plasmic-override={overrides.hiconsIcon3}
                alt={""}
                className={classNames(sty.hiconsIcon3)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("32px" as const)
                    : ("45px" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("32px" as const)
                    : ("45px" as const)
                }
                loading={"lazy" as const}
                src={(() => {
                  try {
                    return $ctx.fetchDyanamicData.records[0].fields
                      .hicons_icon_3[0].url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/c7ff4dd82964e5ed55ed8e02cffad8aa.png";
                    }
                    throw e;
                  }
                })()}
              />

              <div
                data-plasmic-name={"hiconsIcon4"}
                data-plasmic-override={overrides.hiconsIcon4}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.hiconsIcon4
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchDyanamicData.records[0].fields
                        .hicons_label_3;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Vitamins";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___0Kt48)}>
              <p.PlasmicImg
                data-plasmic-name={"hiconsIcon5"}
                data-plasmic-override={overrides.hiconsIcon5}
                alt={""}
                className={classNames(sty.hiconsIcon5)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("32px" as const)
                    : ("45px" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("32px" as const)
                    : ("45px" as const)
                }
                loading={"lazy" as const}
                src={(() => {
                  try {
                    return $ctx.fetchDyanamicData.records[0].fields
                      .hicons_icon_4[0].url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/5c825a2405e0e04e2cec44d1082488b6.png";
                    }
                    throw e;
                  }
                })()}
              />

              <div
                data-plasmic-name={"hiconsIcon6"}
                data-plasmic-override={overrides.hiconsIcon6}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.hiconsIcon6
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchDyanamicData.records[0].fields
                        .hicons_label_4;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Recyclable";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          </div>
        </div>
      ) : null}
      <div
        data-plasmic-name={"offer"}
        data-plasmic-override={overrides.offer}
        className={classNames(projectcss.all, sty.offer)}
      >
        <Offer1
          data-plasmic-name={"offer1"}
          data-plasmic-override={overrides.offer1}
          className={classNames("__wab_instance", sty.offer1)}
          slot={
            <React.Fragment>
              <p.PlasmicLink
                data-plasmic-name={"offerVariant1Url"}
                data-plasmic-override={overrides.offerVariant1Url}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.offerVariant1Url
                )}
                component={Link}
                href={
                  "https://shop.lifehacksplus.com/discount/FREE?redirect=/cart/39394788108:1,39394868748:1,39394817036:1?note=LHP-cw-offer-widget" as const
                }
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  data-plasmic-name={"offerVariant1Image"}
                  data-plasmic-override={overrides.offerVariant1Image}
                  alt={""}
                  className={classNames(sty.offerVariant1Image)}
                  displayHeight={"60px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"60px" as const}
                  loading={"lazy" as const}
                  src={(() => {
                    try {
                      return $ctx.fetchDyanamicData.records[0].fields
                        .offer_variant_image1[0].url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "https://site-assets.plasmic.app/c63d1d2e518b2d80727ede4d7588f173.svg";
                      }
                      throw e;
                    }
                  })()}
                />
              </p.PlasmicLink>
              <div
                data-plasmic-name={"offerVariant1Label"}
                data-plasmic-override={overrides.offerVariant1Label}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.offerVariant1Label
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchDyanamicData.records[0].fields
                        .offer_variant_label1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Strawberry";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </React.Fragment>
          }
          slot2={
            <React.Fragment>
              <p.PlasmicLink
                data-plasmic-name={"offerVariant2Url"}
                data-plasmic-override={overrides.offerVariant2Url}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.offerVariant2Url
                )}
                component={Link}
                href={
                  "https://shop.lifehacksplus.com/discount/FREE?redirect=/cart/39394788236:1,39394868940:1,39394817164:1?discount=FREE&note=LHP-cw-offer-widget" as const
                }
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  data-plasmic-name={"offerVariant2Image"}
                  data-plasmic-override={overrides.offerVariant2Image}
                  alt={""}
                  className={classNames(sty.offerVariant2Image)}
                  displayHeight={"60px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"60px" as const}
                  loading={"lazy" as const}
                  src={(() => {
                    try {
                      return $ctx.fetchDyanamicData.records[0].fields
                        .offer_variant_image2[0].url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "https://site-assets.plasmic.app/eac11844e4f24b6cdb55891eb5d2951d.svg";
                      }
                      throw e;
                    }
                  })()}
                />
              </p.PlasmicLink>
              <div
                data-plasmic-name={"offerVariant2Label"}
                data-plasmic-override={overrides.offerVariant2Label}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.offerVariant2Label
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchDyanamicData.records[0].fields
                        .offer_variant_label2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Vanilla";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </React.Fragment>
          }
          slot3={
            <div
              data-plasmic-name={"offerH1"}
              data-plasmic-override={overrides.offerH1}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.offerH1
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchDyanamicData.records[0].fields.offer_h1;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "SPECIAL OFFER";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          }
          slot4={
            <div
              data-plasmic-name={"offerH2"}
              data-plasmic-override={overrides.offerH2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.offerH2
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchDyanamicData.records[0].fields.offer_h2;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "FREE VITAMIN AIR";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          }
          slot5={
            <div
              data-plasmic-name={"offerParagraph"}
              data-plasmic-override={overrides.offerParagraph}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.offerParagraph
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchDyanamicData.records[0].fields
                      .offer_paragraph;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Money-Back Guarantee: Better Flavor & Harder Hits or Your Money Back.";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          }
          slot6={
            <div
              data-plasmic-name={"offerCta"}
              data-plasmic-override={overrides.offerCta}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.offerCta
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchDyanamicData.records[0].fields.offer_cta;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "CHOOSE FLAVOR";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          }
        >
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__x8F9K
            )}
            component={Link}
            platform={"nextjs"}
          >
            <p.PlasmicImg
              data-plasmic-name={"offerImage"}
              data-plasmic-override={overrides.offerImage}
              alt={""}
              className={classNames(sty.offerImage)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("auto" as const)
                  : ("423px" as const)
              }
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("100%" as const)
                  : ("auto" as const)
              }
              loading={"lazy" as const}
              src={(() => {
                try {
                  return $ctx.fetchDyanamicData.records[0].fields.offer_image[0]
                    .url;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "https://site-assets.plasmic.app/6187c6867888745d6599b0c2b977be87.svg";
                  }
                  throw e;
                }
              })()}
            />
          </p.PlasmicLink>
        </Offer1>
      </div>
      <div
        data-plasmic-name={"products"}
        data-plasmic-override={overrides.products}
        className={classNames(projectcss.all, sty.products)}
      >
        <div className={classNames(projectcss.all, sty.columns__gB42S)}>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.column__rSab
            )}
            component={Link}
            href={
              "https://shop.lifehacksplus.com/discount/QUIT15?redirect=/collections/all/products/3-pack?variant=31099464122437" as const
            }
            platform={"nextjs"}
          >
            <Collection1
              className={classNames("__wab_instance", sty.collection1__lDlIf)}
              slot9={"$56"}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__e3MTj)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/_3PacKsvg.svg",
                  fullWidth: 131,
                  fullHeight: 150,
                  aspectRatio: 0.875566
                }}
              />
            </Collection1>
            <Collection1Cta
              className={classNames(
                "__wab_instance",
                sty.collection1Cta__ffjgy
              )}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__i3Acp
                )}
              >
                {"SHOP NOW"}
              </div>
            </Collection1Cta>
          </p.PlasmicLink>
          {true ? (
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.column___40Qhj
              )}
              component={Link}
              href={
                "https://shop.lifehacksplus.com/discount/QUIT15?redirect=/collections/all/products/variety-pack" as const
              }
              platform={"nextjs"}
            >
              <Collection1
                className={classNames(
                  "__wab_instance",
                  sty.collection1___7Tz5I
                )}
                slot={"VARIETY PACK"}
                slot9={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__k7RfO
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"$98 "}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FF0000" }}
                      >
                        {"+ FREE SHIPPING"}
                      </span>
                    </React.Fragment>
                  </div>
                }
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__hwdSm)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/zendrop/images/varietYsvg.svg",
                    fullWidth: 131,
                    fullHeight: 150,
                    aspectRatio: 0.87471
                  }}
                />
              </Collection1>
              <Collection1Cta
                className={classNames(
                  "__wab_instance",
                  sty.collection1Cta__oIUsq
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vHPz
                  )}
                >
                  {"SHOP NOW"}
                </div>
              </Collection1Cta>
            </p.PlasmicLink>
          ) : null}
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.column__vBa3T
            )}
            component={Link}
            href={
              "https://shop.lifehacksplus.com/discount/QUIT15?redirect=/collections/all/products/fuel?variant=39394788108" as const
            }
            platform={"nextjs"}
          >
            <Collection1
              className={classNames("__wab_instance", sty.collection1__oZ364)}
              slot={"FUEL"}
              slot3={"Energy-Enhancing"}
              slot9={"$20"}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__pEzpI)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/fueLsvg.svg",
                  fullWidth: 132,
                  fullHeight: 150,
                  aspectRatio: 0.877551
                }}
              />
            </Collection1>
            <Collection1Cta
              className={classNames(
                "__wab_instance",
                sty.collection1Cta__zru32
              )}
            />
          </p.PlasmicLink>
        </div>
        <div className={classNames(projectcss.all, sty.columns___01PAz)}>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.column__fAd7X
            )}
            component={Link}
            href={
              "https://shop.lifehacksplus.com/discount/QUIT15?redirect=/collections/all/products/pure?variant=39394817036" as const
            }
            platform={"nextjs"}
          >
            <Collection1
              className={classNames("__wab_instance", sty.collection1__hxMbB)}
              slot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bXhbf
                  )}
                >
                  {"PURE"}
                </div>
              }
              slot3={"Age-Defying"}
              slot9={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wLbF6
                  )}
                >
                  {"$20"}
                </div>
              }
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__hPygx)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/purEsvg.svg",
                  fullWidth: 132,
                  fullHeight: 150,
                  aspectRatio: 0.877551
                }}
              />
            </Collection1>
            <Collection1Cta
              className={classNames("__wab_instance", sty.collection1Cta__wbQW)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jgmW
                )}
              >
                {"SHOP NOW"}
              </div>
            </Collection1Cta>
          </p.PlasmicLink>
          {true ? (
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.column__c1Mbo
              )}
              component={Link}
              href={
                "https://shop.lifehacksplus.com/discount/QUIT15?redirect=/collections/all/products/melt?variant=39394868748" as const
              }
              platform={"nextjs"}
            >
              <Collection1
                className={classNames("__wab_instance", sty.collection1__n7HKb)}
                slot={"MELT"}
                slot3={"Metabolism-Boosting"}
                slot9={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fzQ9
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {"$20"}
                      </span>
                    </React.Fragment>
                  </div>
                }
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__kCz2)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/zendrop/images/melTsvg.svg",
                    fullWidth: 132,
                    fullHeight: 150,
                    aspectRatio: 0.877551
                  }}
                />
              </Collection1>
              <Collection1Cta
                className={classNames(
                  "__wab_instance",
                  sty.collection1Cta__aUB
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dpWix
                  )}
                >
                  {"SHOP NOW"}
                </div>
              </Collection1Cta>
            </p.PlasmicLink>
          ) : null}
          {true ? (
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.column__igj9O
              )}
              component={Link}
              href={
                "https://shop.lifehacksplus.com/discount/QUIT15?redirect=/collections/all/products/fuel?variant=39394788108" as const
              }
              platform={"nextjs"}
            >
              <Collection1
                className={classNames("__wab_instance", sty.collection1__aKiAd)}
                slot={"FUEL"}
                slot3={"Energy-Enhancing"}
                slot9={"$20"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__lOrdd)}
                  displayHeight={"441px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"387px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/zendrop/images/fueLsvg.svg",
                    fullWidth: 132,
                    fullHeight: 150,
                    aspectRatio: 0.877551
                  }}
                />
              </Collection1>
              <Collection1Cta
                className={classNames(
                  "__wab_instance",
                  sty.collection1Cta__jlvFm
                )}
              />
            </p.PlasmicLink>
          ) : null}
        </div>
      </div>
      <Embed
        data-plasmic-name={"embedHtml"}
        data-plasmic-override={overrides.embedHtml}
        className={classNames("__wab_instance", sty.embedHtml)}
        code={
          "<!-- BV Meta Pixel Code -->\n<script>\n!function(f,b,e,v,n,t,s)\n{if(f.fbq)return;n=f.fbq=function(){n.callMethod?\nn.callMethod.apply(n,arguments):n.queue.push(arguments)};\nif(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';\nn.queue=[];t=b.createElement(e);t.async=!0;\nt.src=v;s=b.getElementsByTagName(e)[0];\ns.parentNode.insertBefore(t,s)}(window, document,'script',\n'https://connect.facebook.net/en_US/fbevents.js');\nfbq('init', '744390030232451');\nfbq('track', 'PageView');\n</script>\n<noscript><img height=\"1\" width=\"1\" style=\"display:none\"\nsrc=\"https://www.facebook.com/tr?id=744390030232451&ev=PageView&noscript=1\"\n/></noscript>\n<!-- End Meta Pixel Code -->\n\n<!-- Meta GetSparq Pixel Code -->\n<script>\n!function(f,b,e,v,n,t,s)\n{if(f.fbq)return;n=f.fbq=function(){n.callMethod?\nn.callMethod.apply(n,arguments):n.queue.push(arguments)};\nif(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';\nn.queue=[];t=b.createElement(e);t.async=!0;\nt.src=v;s=b.getElementsByTagName(e)[0];\ns.parentNode.insertBefore(t,s)}(window, document,'script',\n'https://connect.facebook.net/en_US/fbevents.js');\nfbq('init', '700814538266424');\nfbq('track', 'PageView');\n</script>\n<noscript><img height=\"1\" width=\"1\" style=\"display:none\"\nsrc=\"https://www.facebook.com/tr?id=700814538266424&ev=PageView&noscript=1\"\n/></noscript>\n<!-- End Meta Pixel Code -->\n\n<!-- Meta LHP Pixel Code -->\n<script>\n!function(f,b,e,v,n,t,s)\n{if(f.fbq)return;n=f.fbq=function(){n.callMethod?\nn.callMethod.apply(n,arguments):n.queue.push(arguments)};\nif(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';\nn.queue=[];t=b.createElement(e);t.async=!0;\nt.src=v;s=b.getElementsByTagName(e)[0];\ns.parentNode.insertBefore(t,s)}(window, document,'script',\n'https://connect.facebook.net/en_US/fbevents.js');\nfbq('init', '1183658905859121');\nfbq('track', 'PageView');\n</script>\n<noscript><img height=\"1\" width=\"1\" style=\"display:none\"\nsrc=\"https://www.facebook.com/tr?id=1183658905859121&ev=PageView&noscript=1\"\n/></noscript>\n<!-- End Meta Pixel Code -->" as const
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "logo",
    "hiconsH1",
    "hiconsIcon1",
    "hiconsLabel1",
    "hiconsIcon2",
    "hiconsLabel2",
    "hiconsIcon3",
    "hiconsIcon4",
    "hiconsIcon5",
    "hiconsIcon6",
    "offer",
    "offer1",
    "offerImage",
    "offerVariant1Url",
    "offerVariant1Image",
    "offerVariant1Label",
    "offerVariant2Url",
    "offerVariant2Image",
    "offerVariant2Label",
    "offerH1",
    "offerH2",
    "offerParagraph",
    "offerCta",
    "products",
    "embedHtml"
  ],

  logo: ["logo"],
  hiconsH1: ["hiconsH1"],
  hiconsIcon1: ["hiconsIcon1"],
  hiconsLabel1: ["hiconsLabel1"],
  hiconsIcon2: ["hiconsIcon2"],
  hiconsLabel2: ["hiconsLabel2"],
  hiconsIcon3: ["hiconsIcon3"],
  hiconsIcon4: ["hiconsIcon4"],
  hiconsIcon5: ["hiconsIcon5"],
  hiconsIcon6: ["hiconsIcon6"],
  offer: [
    "offer",
    "offer1",
    "offerImage",
    "offerVariant1Url",
    "offerVariant1Image",
    "offerVariant1Label",
    "offerVariant2Url",
    "offerVariant2Image",
    "offerVariant2Label",
    "offerH1",
    "offerH2",
    "offerParagraph",
    "offerCta"
  ],

  offer1: [
    "offer1",
    "offerImage",
    "offerVariant1Url",
    "offerVariant1Image",
    "offerVariant1Label",
    "offerVariant2Url",
    "offerVariant2Image",
    "offerVariant2Label",
    "offerH1",
    "offerH2",
    "offerParagraph",
    "offerCta"
  ],

  offerImage: ["offerImage"],
  offerVariant1Url: ["offerVariant1Url", "offerVariant1Image"],
  offerVariant1Image: ["offerVariant1Image"],
  offerVariant1Label: ["offerVariant1Label"],
  offerVariant2Url: ["offerVariant2Url", "offerVariant2Image"],
  offerVariant2Image: ["offerVariant2Image"],
  offerVariant2Label: ["offerVariant2Label"],
  offerH1: ["offerH1"],
  offerH2: ["offerH2"],
  offerParagraph: ["offerParagraph"],
  offerCta: ["offerCta"],
  products: ["products"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  logo: typeof p.PlasmicImg;
  hiconsH1: "div";
  hiconsIcon1: typeof p.PlasmicImg;
  hiconsLabel1: "div";
  hiconsIcon2: typeof p.PlasmicImg;
  hiconsLabel2: "div";
  hiconsIcon3: typeof p.PlasmicImg;
  hiconsIcon4: "div";
  hiconsIcon5: typeof p.PlasmicImg;
  hiconsIcon6: "div";
  offer: "div";
  offer1: typeof Offer1;
  offerImage: typeof p.PlasmicImg;
  offerVariant1Url: "a";
  offerVariant1Image: typeof p.PlasmicImg;
  offerVariant1Label: "div";
  offerVariant2Url: "a";
  offerVariant2Image: typeof p.PlasmicImg;
  offerVariant2Label: "div";
  offerH1: "div";
  offerH2: "div";
  offerParagraph: "div";
  offerCta: "div";
  products: "div";
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCollection12__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCollection12__VariantsArgs;
    args?: PlasmicCollection12__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCollection12__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCollection12__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCollection12__ArgProps,
          internalVariantPropNames: PlasmicCollection12__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCollection12__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCollection12";
  } else {
    func.displayName = `PlasmicCollection12.${nodeName}`;
  }
  return func;
}

export const PlasmicCollection12 = Object.assign(
  // Top-level PlasmicCollection12 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    hiconsH1: makeNodeComponent("hiconsH1"),
    hiconsIcon1: makeNodeComponent("hiconsIcon1"),
    hiconsLabel1: makeNodeComponent("hiconsLabel1"),
    hiconsIcon2: makeNodeComponent("hiconsIcon2"),
    hiconsLabel2: makeNodeComponent("hiconsLabel2"),
    hiconsIcon3: makeNodeComponent("hiconsIcon3"),
    hiconsIcon4: makeNodeComponent("hiconsIcon4"),
    hiconsIcon5: makeNodeComponent("hiconsIcon5"),
    hiconsIcon6: makeNodeComponent("hiconsIcon6"),
    offer: makeNodeComponent("offer"),
    offer1: makeNodeComponent("offer1"),
    offerImage: makeNodeComponent("offerImage"),
    offerVariant1Url: makeNodeComponent("offerVariant1Url"),
    offerVariant1Image: makeNodeComponent("offerVariant1Image"),
    offerVariant1Label: makeNodeComponent("offerVariant1Label"),
    offerVariant2Url: makeNodeComponent("offerVariant2Url"),
    offerVariant2Image: makeNodeComponent("offerVariant2Image"),
    offerVariant2Label: makeNodeComponent("offerVariant2Label"),
    offerH1: makeNodeComponent("offerH1"),
    offerH2: makeNodeComponent("offerH2"),
    offerParagraph: makeNodeComponent("offerParagraph"),
    offerCta: makeNodeComponent("offerCta"),
    products: makeNodeComponent("products"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicCollection12
    internalVariantProps: PlasmicCollection12__VariantProps,
    internalArgProps: PlasmicCollection12__ArgProps
  }
);

export default PlasmicCollection12;
/* prettier-ignore-end */
