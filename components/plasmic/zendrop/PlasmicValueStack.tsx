// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4UKWsAMfUC1kEuLgBvknC
// Component: VJFcF81x8F

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsjZPl8KLomlJe } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jZPl8KLomlJe/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_zendrop.module.css"; // plasmic-import: 4UKWsAMfUC1kEuLgBvknC/projectcss
import sty from "./PlasmicValueStack.module.css"; // plasmic-import: VJFcF81x8F/css

createPlasmicElementProxy;

export type PlasmicValueStack__VariantMembers = {};
export type PlasmicValueStack__VariantsArgs = {};
type VariantPropType = keyof PlasmicValueStack__VariantsArgs;
export const PlasmicValueStack__VariantProps = new Array<VariantPropType>();

export type PlasmicValueStack__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  children2?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
};
type ArgPropType = keyof PlasmicValueStack__ArgsType;
export const PlasmicValueStack__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3",
  "children2",
  "slot4",
  "slot5",
  "slot6"
);

export type PlasmicValueStack__OverridesType = {
  root?: p.Flex<"div">;
  mobile?: p.Flex<"div">;
  desktop?: p.Flex<"div">;
};

export interface DefaultValueStackProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  children2?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicValueStack__RenderFunc(props: {
  variants: PlasmicValueStack__VariantsArgs;
  args: PlasmicValueStack__ArgsType;
  overrides: PlasmicValueStack__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjZPl8KLomlJe()
  });

  return (
    (hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <div
            data-plasmic-name={"mobile"}
            data-plasmic-override={overrides.mobile}
            className={classNames(projectcss.all, sty.mobile)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__rlTd8)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__uQgAu)}>
                  {true ? (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___6W9Lt)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                    />
                  ) : null}
                </div>
              ) : null}
              <div className={classNames(projectcss.all, sty.freeBox__m15Lc)}>
                <div className={classNames(projectcss.all, sty.freeBox__ahcVt)}>
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7Cl1B
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#636363" }}
                          >
                            {"30-Day Zendrop PLUS App Free Trial:"}
                          </span>
                        </React.Fragment>
                      </div>
                    ),
                    value: args.children,
                    className: classNames(sty.slotTargetChildren)
                  })}
                </div>
                {true ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w6Tky
                    )}
                  >
                    {"Enter some text"}
                  </div>
                ) : null}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__hr8No)}>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__bPRkY
                  )}
                  component={Link}
                  href={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("https://zendrop.com/checkout-plus-fb/" as const)
                      : ("https://zendrop.com/checkout-trial-fb/" as const)
                  }
                  platform={"nextjs"}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link___8Wj93
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {"\ud83d\udc49  FREE  \ud83d\udc48"}
                      </p.PlasmicLink>
                    ),
                    value: args.slot2
                  })}
                </p.PlasmicLink>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pUCk)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ds8Yw)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___3IguY
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: "Price: $2,997",
                          value: args.slot,
                          className: classNames(sty.slotTargetSlot)
                        })}
                      </div>
                    </div>
                  </div>
                ) : null}
              </div>
            </div>
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__bozcQ)}>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ot8Yo)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__d8LIy)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___6K0G2)}
                        displayHeight={"24px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"24px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/zendrop/images/downloadsvg2.svg",
                          fullWidth: 150,
                          fullHeight: 150,
                          aspectRatio: 1
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__n6EPe
                        )}
                      >
                        {"Instant Access"}
                      </div>
                    </div>
                  </div>
                ) : null}
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__fOcAz)}>
              <div className={classNames(projectcss.all, sty.freeBox__ziYkb)}>
                <div className={classNames(projectcss.all, sty.freeBox__k9Dm5)}>
                  {p.renderPlasmicSlot({
                    defaultContents:
                      "Network and learn from some of the top dropshippers on the planet. ",
                    value: args.slot3
                  })}
                </div>
              </div>
            </div>
          </div>
        ) : null}
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <div className={classNames(projectcss.all, sty.freeBox__hLxua)}>
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div
                data-plasmic-name={"desktop"}
                data-plasmic-override={overrides.desktop}
                className={classNames(projectcss.all, sty.desktop)}
              >
                <div className={classNames(projectcss.all, sty.freeBox___9C2M)}>
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ynnMc)}
                    >
                      {true ? (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___8ZJt2)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                        />
                      ) : null}
                    </div>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__iUl1T)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yxZe)}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ydLf4
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#636363" }}
                              >
                                {"30-Day Zendrop PLUS App Free Trial:"}
                              </span>
                            </React.Fragment>
                          </div>
                        ),
                        value: args.children2,
                        className: classNames(sty.slotTargetChildren2)
                      })}
                    </div>
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___73XtN
                        )}
                      >
                        {"Enter some text"}
                      </div>
                    ) : null}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___8HitU)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fgRaI)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__m2Na)}
                        displayHeight={"24px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"24px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/zendrop/images/downloadsvg2.svg",
                          fullWidth: 150,
                          fullHeight: 150,
                          aspectRatio: 1
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2YAqe
                        )}
                      >
                        {"Instant Access"}
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sal4L)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6Y1Wz
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hv56K
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: "Price: $2,997",
                          value: args.slot4,
                          className: classNames(sty.slotTargetSlot4)
                        })}
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gw4Lk)}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__wfWux
                      )}
                      component={Link}
                      href={"https://zendrop.com/checkout-plus-fb/" as const}
                      platform={"nextjs"}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tbtwK
                            )}
                          >
                            {"\ud83d\udc49  FREE  \ud83d\udc48"}
                          </div>
                        ),
                        value: args.slot5
                      })}
                    </p.PlasmicLink>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__n3Rw2)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kyzIl)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2Y28A
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents:
                          "Network and learn from some of the top dropshippers on the planet. ",
                        value: args.slot6
                      })}
                    </div>
                  </div>
                </div>
              </div>
            ) : null}
          </div>
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "mobile", "desktop"],
  mobile: ["mobile"],
  desktop: ["desktop"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  mobile: "div";
  desktop: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicValueStack__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicValueStack__VariantsArgs;
    args?: PlasmicValueStack__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicValueStack__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicValueStack__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicValueStack__ArgProps,
          internalVariantPropNames: PlasmicValueStack__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicValueStack__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicValueStack";
  } else {
    func.displayName = `PlasmicValueStack.${nodeName}`;
  }
  return func;
}

export const PlasmicValueStack = Object.assign(
  // Top-level PlasmicValueStack renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    mobile: makeNodeComponent("mobile"),
    desktop: makeNodeComponent("desktop"),

    // Metadata about props expected for PlasmicValueStack
    internalVariantProps: PlasmicValueStack__VariantProps,
    internalArgProps: PlasmicValueStack__ArgProps
  }
);

export default PlasmicValueStack;
/* prettier-ignore-end */
