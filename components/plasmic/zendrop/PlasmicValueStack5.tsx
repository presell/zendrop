// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4UKWsAMfUC1kEuLgBvknC
// Component: rovLLY09uVi

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_zendrop.module.css"; // plasmic-import: 4UKWsAMfUC1kEuLgBvknC/projectcss
import sty from "./PlasmicValueStack5.module.css"; // plasmic-import: rovLLY09uVi/css

createPlasmicElementProxy;

export type PlasmicValueStack5__VariantMembers = {};
export type PlasmicValueStack5__VariantsArgs = {};
type VariantPropType = keyof PlasmicValueStack5__VariantsArgs;
export const PlasmicValueStack5__VariantProps = new Array<VariantPropType>();

export type PlasmicValueStack5__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
};
type ArgPropType = keyof PlasmicValueStack5__ArgsType;
export const PlasmicValueStack5__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3",
  "slot4",
  "slot5",
  "slot6"
);

export type PlasmicValueStack5__OverridesType = {
  root?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultValueStack5Props {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicValueStack5__RenderFunc(props: {
  variants: PlasmicValueStack5__VariantsArgs;
  args: PlasmicValueStack5__ArgsType;
  overrides: PlasmicValueStack5__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__nzFTn)}>
        <div className={classNames(projectcss.all, sty.freeBox__l48WH)}>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__ehXrz)}>
              {true ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__gnqri)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                />
              ) : null}
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__pIpn)}>
            <div className={classNames(projectcss.all, sty.freeBox__rFr1E)}>
              {p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__paxJm
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#636363" }}
                      >
                        {"Advanced TikTok & Facebook Ads Training:"}
                      </span>
                    </React.Fragment>
                  </div>
                ),
                value: args.children,
                className: classNames(sty.slotTargetChildren)
              })}
            </div>
            {true ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lmU7P
                )}
              >
                {"Enter some text"}
              </div>
            ) : null}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__nOfwt)}>
            <div className={classNames(projectcss.all, sty.freeBox__rbhWw)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__wcvN)}
                displayHeight={"24px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"24px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/downloadsvg2.svg",
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sPlPp
                )}
              >
                {"Instant Access"}
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__qn4Mn)}>
            <div className={classNames(projectcss.all, sty.freeBox__duNHf)}>
              <div className={classNames(projectcss.all, sty.freeBox__aSTyM)}>
                {p.renderPlasmicSlot({
                  defaultContents: "Price: $9,997+",
                  value: args.slot,
                  className: classNames(sty.slotTargetSlot)
                })}
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__wKsi2)}>
            <p.PlasmicLink
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(projectcss.all, projectcss.a, sty.link)}
              component={Link}
              platform={"nextjs"}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nHrWa
                    )}
                  >
                    {"\ud83d\udc49  FREE  \ud83d\udc48"}
                  </div>
                ),
                value: args.slot2
              })}
            </p.PlasmicLink>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__cx1R)}>
          <div className={classNames(projectcss.all, sty.freeBox__nAhXh)}>
            <div className={classNames(projectcss.all, sty.freeBox__wwVyV)}>
              {p.renderPlasmicSlot({
                defaultContents:
                  "Learn How to Generate Profitable Traffic for Any Store With Zendrop Academy.",
                value: args.slot3
              })}
            </div>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___0DbTz)}>
          <div className={classNames(projectcss.all, sty.freeBox__dSdNc)}>
            <div className={classNames(projectcss.all, sty.freeBox__i5IHl)}>
              <div className={classNames(projectcss.all, sty.freeBox___4K1B)}>
                <div className={classNames(projectcss.all, sty.freeBox__zt8Wf)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ojQj9)}
                    displayHeight={"80px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"120px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/zendrop/images/timBurdTalkpng.png",
                      fullWidth: 240,
                      fullHeight: 160,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__uXu7X)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jAjo
                    )}
                  >
                    {"Tim Burd Mastermind Presentation"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__kxLeY)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4MUj)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ypOsO)}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: "Price: $2,997",
                        value: args.slot4,
                        className: classNames(sty.slotTargetSlot4)
                      })}
                    </div>
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__aFr8L)}>
                <div className={classNames(projectcss.all, sty.freeBox__v0Lrn)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ofOOf)}
                    displayHeight={"80px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"120px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/zendrop/images/justinWoolpng.png",
                      fullWidth: 240,
                      fullHeight: 160,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__heKx)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vxqaS
                    )}
                  >
                    {"Justin Wool Mastermind Presentation"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__t6Rib)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xIm7S)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zV0El)}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: "Price: $2,997",
                        value: args.slot5,
                        className: classNames(sty.slotTargetSlot5)
                      })}
                    </div>
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__oSlBz)}>
                <div className={classNames(projectcss.all, sty.freeBox__v2BfL)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ahgKl)}
                    displayHeight={"80px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"120px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/zendrop/images/academy600450Px800450Px6Png.png",
                      fullWidth: 798,
                      fullHeight: 449,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__ast4E)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hrDq3
                    )}
                  >
                    {"Plus 50+ High-Value Modules"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__ad6Ix)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___6Cpqp)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0HVhu
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: "Price: $2,997",
                        value: args.slot6,
                        className: classNames(sty.slotTargetSlot6)
                      })}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicValueStack5__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicValueStack5__VariantsArgs;
    args?: PlasmicValueStack5__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicValueStack5__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicValueStack5__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicValueStack5__ArgProps,
          internalVariantPropNames: PlasmicValueStack5__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicValueStack5__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicValueStack5";
  } else {
    func.displayName = `PlasmicValueStack5.${nodeName}`;
  }
  return func;
}

export const PlasmicValueStack5 = Object.assign(
  // Top-level PlasmicValueStack5 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicValueStack5
    internalVariantProps: PlasmicValueStack5__VariantProps,
    internalArgProps: PlasmicValueStack5__ArgProps
  }
);

export default PlasmicValueStack5;
/* prettier-ignore-end */
