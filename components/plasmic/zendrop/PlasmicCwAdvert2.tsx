// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4UKWsAMfUC1kEuLgBvknC
// Component: tIekD3-XbimC

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent
import Offer2 from "../../Offer2"; // plasmic-import: 4lse9ErhYc7w/component

import { useScreenVariants as useScreenVariantsjZPl8KLomlJe } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jZPl8KLomlJe/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_zendrop.module.css"; // plasmic-import: 4UKWsAMfUC1kEuLgBvknC/projectcss
import sty from "./PlasmicCwAdvert2.module.css"; // plasmic-import: tIekD3-XbimC/css

createPlasmicElementProxy;

export type PlasmicCwAdvert2__VariantMembers = {};
export type PlasmicCwAdvert2__VariantsArgs = {};
type VariantPropType = keyof PlasmicCwAdvert2__VariantsArgs;
export const PlasmicCwAdvert2__VariantProps = new Array<VariantPropType>();

export type PlasmicCwAdvert2__ArgsType = {
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCwAdvert2__ArgsType;
export const PlasmicCwAdvert2__ArgProps = new Array<ArgPropType>(
  "slot7",
  "slot8",
  "slot9"
);

export type PlasmicCwAdvert2__OverridesType = {
  root?: p.Flex<"div">;
  nav?: p.Flex<"div">;
  logo?: p.Flex<typeof p.PlasmicImg>;
  aSlogan?: p.Flex<"div">;
  intro?: p.Flex<"div">;
  heroHeadline?: p.Flex<"div">;
  heroSubHeadline?: p.Flex<"div">;
  aCta?: p.Flex<"a"> & Partial<LinkProps>;
  reviewIcon2?: p.Flex<typeof p.PlasmicImg>;
  reviewStatement2?: p.Flex<"div">;
  body?: p.Flex<"div">;
  articleBody?: p.Flex<"div">;
  press?: p.Flex<"div">;
  pressIcons?: p.Flex<typeof p.PlasmicImg>;
  paragraph1?: p.Flex<"div">;
  heroImage?: p.Flex<typeof p.PlasmicImg>;
  h21?: p.Flex<"div">;
  paragraph2?: p.Flex<"div">;
  h22?: p.Flex<"div">;
  paragraph22?: p.Flex<"div">;
  image2?: p.Flex<typeof p.PlasmicImg>;
  paragraph31?: p.Flex<"div">;
  paragraph32?: p.Flex<"div">;
  h23?: p.Flex<"div">;
  image3?: p.Flex<typeof p.PlasmicImg>;
  paragraph4?: p.Flex<"div">;
  paragraph411?: p.Flex<"ol">;
  image4?: p.Flex<typeof p.PlasmicImg>;
  h24?: p.Flex<"div">;
  review1?: p.Flex<"div">;
  paragraph42?: p.Flex<"div">;
  paragraph43?: p.Flex<"div">;
  paragraph44?: p.Flex<"div">;
  review2?: p.Flex<"div">;
  paragraph45?: p.Flex<"div">;
  paragraph46?: p.Flex<"div">;
  paragraph47?: p.Flex<"div">;
  review3?: p.Flex<"div">;
  paragraph48?: p.Flex<"div">;
  paragraph49?: p.Flex<"div">;
  paragraph410?: p.Flex<"div">;
  paragraph23?: p.Flex<"div">;
  paragraph24?: p.Flex<"div">;
  paragraph25?: p.Flex<"div">;
  paragraph26?: p.Flex<"div">;
  h25?: p.Flex<"div">;
  h35?: p.Flex<"div">;
  offerMobile?: p.Flex<"div">;
  offerDesktop?: p.Flex<"div">;
  offer2?: p.Flex<typeof Offer2>;
  image5?: p.Flex<typeof p.PlasmicImg>;
  paragraph6?: p.Flex<"div">;
  h26?: p.Flex<"div">;
  faq1?: p.Flex<"div">;
  faq12?: p.Flex<"div">;
  faq13?: p.Flex<"div">;
  faq14?: p.Flex<"div">;
  faq15?: p.Flex<"div">;
  image6?: p.Flex<typeof p.PlasmicImg>;
  h27?: p.Flex<"div">;
  image7?: p.Flex<typeof p.PlasmicImg>;
  aOutroH1?: p.Flex<"a"> & Partial<LinkProps>;
  aCta2?: p.Flex<"a"> & Partial<LinkProps>;
  aOutroH2?: p.Flex<"div">;
  reviewIcon?: p.Flex<typeof p.PlasmicImg>;
  aOutroH3?: p.Flex<"div">;
  aOutroImage?: p.Flex<typeof p.PlasmicImg>;
  reviewMugshot1?: p.Flex<typeof p.PlasmicImg>;
  reviewName1?: p.Flex<"div">;
  reviewIcon3?: p.Flex<typeof p.PlasmicImg>;
  reviewH11?: p.Flex<"div">;
  reviewP1?: p.Flex<"div">;
  reviewMugshot2?: p.Flex<typeof p.PlasmicImg>;
  reviewName2?: p.Flex<"div">;
  reviewIcon4?: p.Flex<typeof p.PlasmicImg>;
  reviewH12?: p.Flex<"div">;
  reviewP2?: p.Flex<"div">;
  reviewMugshot3?: p.Flex<typeof p.PlasmicImg>;
  reviewName3?: p.Flex<"div">;
  reviewIcon5?: p.Flex<typeof p.PlasmicImg>;
  reviewH122?: p.Flex<"div">;
  reviewP3?: p.Flex<"div">;
  reviewIcon6?: p.Flex<typeof p.PlasmicImg>;
  reviewStatement?: p.Flex<"div">;
  ctaCardH1?: p.Flex<"div">;
  ctaCardH2?: p.Flex<"div">;
  aCta3?: p.Flex<"a"> & Partial<LinkProps>;
  article?: p.Flex<"div">;
  reviews?: p.Flex<"div">;
};

export interface DefaultCwAdvert2Props {
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCwAdvert2__RenderFunc(props: {
  variants: PlasmicCwAdvert2__VariantsArgs;
  args: PlasmicCwAdvert2__ArgsType;
  overrides: PlasmicCwAdvert2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjZPl8KLomlJe()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Embed
        className={classNames("__wab_instance", sty.embedHtml__hzyZf)}
        code={
          "<!-- BV Meta Pixel Code -->\n<script>\n!function(f,b,e,v,n,t,s)\n{if(f.fbq)return;n=f.fbq=function(){n.callMethod?\nn.callMethod.apply(n,arguments):n.queue.push(arguments)};\nif(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';\nn.queue=[];t=b.createElement(e);t.async=!0;\nt.src=v;s=b.getElementsByTagName(e)[0];\ns.parentNode.insertBefore(t,s)}(window, document,'script',\n'https://connect.facebook.net/en_US/fbevents.js');\nfbq('init', '744390030232451');\nfbq('track', 'PageView');\n</script>\n<noscript><img height=\"1\" width=\"1\" style=\"display:none\"\nsrc=\"https://www.facebook.com/tr?id=744390030232451&ev=PageView&noscript=1\"\n/></noscript>\n<!-- End Meta Pixel Code -->\n\n<!-- Meta GetSparq Pixel Code -->\n<script>\n!function(f,b,e,v,n,t,s)\n{if(f.fbq)return;n=f.fbq=function(){n.callMethod?\nn.callMethod.apply(n,arguments):n.queue.push(arguments)};\nif(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';\nn.queue=[];t=b.createElement(e);t.async=!0;\nt.src=v;s=b.getElementsByTagName(e)[0];\ns.parentNode.insertBefore(t,s)}(window, document,'script',\n'https://connect.facebook.net/en_US/fbevents.js');\nfbq('init', '700814538266424');\nfbq('track', 'PageView');\n</script>\n<noscript><img height=\"1\" width=\"1\" style=\"display:none\"\nsrc=\"https://www.facebook.com/tr?id=700814538266424&ev=PageView&noscript=1\"\n/></noscript>\n<!-- End Meta Pixel Code -->\n\n<!-- Meta LHP Pixel Code -->\n<script>\n!function(f,b,e,v,n,t,s)\n{if(f.fbq)return;n=f.fbq=function(){n.callMethod?\nn.callMethod.apply(n,arguments):n.queue.push(arguments)};\nif(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';\nn.queue=[];t=b.createElement(e);t.async=!0;\nt.src=v;s=b.getElementsByTagName(e)[0];\ns.parentNode.insertBefore(t,s)}(window, document,'script',\n'https://connect.facebook.net/en_US/fbevents.js');\nfbq('init', '1183658905859121');\nfbq('track', 'PageView');\n</script>\n<noscript><img height=\"1\" width=\"1\" style=\"display:none\"\nsrc=\"https://www.facebook.com/tr?id=1183658905859121&ev=PageView&noscript=1\"\n/></noscript>\n<!-- End Meta Pixel Code -->" as const
        }
      />

      <div
        data-plasmic-name={"nav"}
        data-plasmic-override={overrides.nav}
        className={classNames(projectcss.all, sty.nav)}
      >
        <div className={classNames(projectcss.all, sty.columns__kcdYh)}>
          <div className={classNames(projectcss.all, sty.column__btdE5)}>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__wg5Fy
              )}
              component={Link}
              platform={"nextjs"}
            >
              <p.PlasmicImg
                data-plasmic-name={"logo"}
                data-plasmic-override={overrides.logo}
                alt={""}
                className={classNames(sty.logo)}
                displayHeight={"auto" as const}
                displayMaxHeight={"50px" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"125px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/logopng.png",
                  fullWidth: 276,
                  fullHeight: 46,
                  aspectRatio: undefined
                }}
              />
            </p.PlasmicLink>
          </div>
          <div className={classNames(projectcss.all, sty.column__hDsAh)}>
            <div
              data-plasmic-name={"aSlogan"}
              data-plasmic-override={overrides.aSlogan}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.aSlogan
              )}
            >
              {'"The Evolution of Inhalation"'}
            </div>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"intro"}
        data-plasmic-override={overrides.intro}
        className={classNames(projectcss.all, sty.intro)}
      >
        <div
          data-plasmic-name={"heroHeadline"}
          data-plasmic-override={overrides.heroHeadline}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.heroHeadline
          )}
        >
          {hasVariant(globalVariants, "screen", "mobileOnly")
            ? "Want All The Joy Of Inhalation, But None Of The Health Compromises?"
            : "Want All The Joy Of Inhalation, But\nNone Of The Health Compromises?"}
        </div>
        <div
          data-plasmic-name={"heroSubHeadline"}
          data-plasmic-override={overrides.heroSubHeadline}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.heroSubHeadline
          )}
        >
          {hasVariant(globalVariants, "screen", "mobileOnly") ? (
            <React.Fragment>
              <React.Fragment>{"Inhale. Relax. Enjoy Your "}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"Daily Vitamin Boost!"}
              </span>
            </React.Fragment>
          ) : (
            <React.Fragment>
              <React.Fragment>{"Inhale. Relax. Enjoy Your "}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"Daily Vitamin Boost!"}
              </span>
            </React.Fragment>
          )}
        </div>
        <p.PlasmicLink
          data-plasmic-name={"aCta"}
          data-plasmic-override={overrides.aCta}
          className={classNames(projectcss.all, projectcss.a, sty.aCta)}
          component={Link}
          onClick={async event => {
            const $steps = {};
            $steps["setVariable"] = true
              ? (() => {
                  const actionArgs = {};
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "h8Q7JQR6sOQ9",
                      componentUuid: "tIekD3-XbimC"
                    },
                    () =>
                      (({ variable, value, startIndex, deleteCount }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        undefined;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
            if (
              typeof $steps["setVariable"] === "object" &&
              typeof $steps["setVariable"].then === "function"
            ) {
              $steps["setVariable"] = await __wrapUserPromise(
                {
                  type: "InteractionLoc",
                  actionName: "updateVariable",
                  interactionUuid: "h8Q7JQR6sOQ9",
                  componentUuid: "tIekD3-XbimC"
                },
                $steps["setVariable"]
              );
            }
          }}
          platform={"nextjs"}
        >
          {p.renderPlasmicSlot({
            defaultContents: "CLAIM FREE DEVICE \ud83d\udc49",
            value: args.slot8,
            className: classNames(sty.slotTargetSlot8)
          })}
        </p.PlasmicLink>
        <div className={classNames(projectcss.all, sty.freeBox___6WPkr)}>
          <p.PlasmicImg
            data-plasmic-name={"reviewIcon2"}
            data-plasmic-override={overrides.reviewIcon2}
            alt={""}
            className={classNames(sty.reviewIcon2)}
            displayHeight={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ("11px" as const)
                : ("auto" as const)
            }
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/zendrop/images/starpng.png",
              fullWidth: 142,
              fullHeight: 21,
              aspectRatio: undefined
            }}
          />

          <div
            data-plasmic-name={"reviewStatement2"}
            data-plasmic-override={overrides.reviewStatement2}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.reviewStatement2
            )}
          >
            <React.Fragment>
              <React.Fragment>{"Rated 4.9 Stars By "}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"100,000+"}
              </span>
              <React.Fragment>{" Customers"}</React.Fragment>
            </React.Fragment>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        className={classNames(projectcss.all, sty.body)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__rGf6S)}>
          <div
            data-plasmic-name={"articleBody"}
            data-plasmic-override={overrides.articleBody}
            className={classNames(projectcss.all, sty.articleBody)}
          >
            {true ? (
              <div
                data-plasmic-name={"press"}
                data-plasmic-override={overrides.press}
                className={classNames(projectcss.all, sty.press)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__h49AS
                  )}
                >
                  {"As Featured In:"}
                </div>
                <p.PlasmicImg
                  data-plasmic-name={"pressIcons"}
                  data-plasmic-override={overrides.pressIcons}
                  alt={""}
                  className={classNames(sty.pressIcons)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("300px" as const)
                      : ("100%" as const)
                  }
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"475px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/zendrop/images/presssvg.svg",
                    fullWidth: 300,
                    fullHeight: 20,
                    aspectRatio: 15.325
                  }}
                />
              </div>
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"paragraph1"}
                data-plasmic-override={overrides.paragraph1}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.paragraph1
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {"Imagine a world where you could "}
                  </React.Fragment>
                  {
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.link___8PfRx
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {"inhale vitamins"}
                    </p.PlasmicLink>
                  }
                  <React.Fragment>
                    {
                      ", minerals, and antioxidants to improve your well-being.\n\nThink about what it would be like to never have to suffer again through the jitters and anxiety that traditional inhalation methods bring.\n\nWhat if you\u2019ll no longer have to choose between your habit or quitting, or feel like you are compromising on health just to get the throat hit and flavor you enjoy?"
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
            ) : null}
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__uufc6
              )}
              component={Link}
              platform={"nextjs"}
            >
              <p.PlasmicImg
                data-plasmic-name={"heroImage"}
                data-plasmic-override={overrides.heroImage}
                alt={""}
                className={classNames(sty.heroImage)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/midbannerjpgpng.png",
                  fullWidth: 761,
                  fullHeight: 862,
                  aspectRatio: undefined
                }}
              />
            </p.PlasmicLink>
            {true ? (
              <div
                data-plasmic-name={"h21"}
                data-plasmic-override={overrides.h21}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.h21
                )}
              >
                {"Scientists Invent Healthy Vitamin Diffuser:"}
              </div>
            ) : null}
            <div
              data-plasmic-name={"paragraph2"}
              data-plasmic-override={overrides.paragraph2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.paragraph2
              )}
            >
              <React.Fragment>
                <React.Fragment>{"This "}</React.Fragment>
                {
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link__oqIyG
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"new invention"}
                  </p.PlasmicLink>
                }
                <React.Fragment>
                  {
                    " is turning bad habits into healthy ones\u2026\n\nImagine being nic-free without having to quit!\n\nSounds too good to be true, right?\n\nThe solution is simple..."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"h22"}
              data-plasmic-override={overrides.h22}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.h22
              )}
            >
              {"Introducing Vitamin Air:"}
            </div>
            <div
              data-plasmic-name={"paragraph22"}
              data-plasmic-override={overrides.paragraph22}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.paragraph22
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link__yLmYj
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Vitamin Air is the Evolution of Inhalation."}
                  </p.PlasmicLink>
                }
                <React.Fragment>
                  {
                    "\n\nEach breath is filled with vitamins that melt away stress and anxiety while instantly eliminating nic-cravings.\n\nThere are no sacrifices here\u2026\n\nThe device hits hard and packs intense flavor!"
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__umSi3)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___7WYb)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("auto" as const)
                    : ("250px" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("50px" as const)
                    : ("auto" as const)
                }
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/negativepng.png",
                  fullWidth: 179,
                  fullHeight: 338,
                  aspectRatio: undefined
                }}
              />

              <div className={classNames(projectcss.all, sty.freeBox__pnaWl)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xmCE
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\u274c Addictive Nic"
                    : "\u274c Addictive Nic"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dYqnc
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\u274c Harmful Chemicals"
                    : "\u274c Harmful Chemicals"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1PEp
                  )}
                >
                  {"\u274c Destroys Lungs"}
                </div>
              </div>
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__k6X0N
                )}
                component={Link}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__qFrTr)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("auto" as const)
                      : ("250px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("50px" as const)
                      : ("auto" as const)
                  }
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/zendrop/images/fuelIso21Png.png",
                    fullWidth: 126,
                    fullHeight: 296,
                    aspectRatio: undefined
                  }}
                />
              </p.PlasmicLink>
              <div className={classNames(projectcss.all, sty.freeBox__ew6ZW)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__p4FVv
                  )}
                >
                  {"\u2705 ZERO Nic"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aJ7W
                  )}
                >
                  {"\u2705 Lab Tested"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cg0R2
                  )}
                >
                  {"\u2705 Happy Lungs"}
                </div>
              </div>
            </div>
            {true ? (
              <p.PlasmicImg
                data-plasmic-name={"image2"}
                data-plasmic-override={overrides.image2}
                alt={""}
                className={classNames(sty.image2)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/comparepng2.png",
                  fullWidth: 1461,
                  fullHeight: 607,
                  aspectRatio: undefined
                }}
              />
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__gl3VM)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__o0Kfp
                  )}
                >
                  {"#1"}
                </div>
                <div
                  data-plasmic-name={"paragraph31"}
                  data-plasmic-override={overrides.paragraph31}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.paragraph31
                  )}
                >
                  {
                    "If you're trying to quit, it can feel like every craving is another insurmountable problem to face.. Even if you've managed to go several days, weeks, or months without caving, you still crave that puff\u2026that throat hit\u2026that oh so satisfying flavor.\n\nWe know nic is addictive\u2026but did you know it\u2019s the oral fixation that keeps bringing you back? When you drop the habit, nic is out of your system in 72 hours but the oral fixation can last in the brain for up to 10 years!\n\nThat's why no matter how many times you try, you find yourself going back to your old habit again and again. Fortunately, we've got the alternative that will break this repetitive pattern!"
                  }
                </div>
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__y3DOx)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__t5VXi
                  )}
                >
                  {"#2"}
                </div>
                {true ? (
                  <div
                    data-plasmic-name={"paragraph32"}
                    data-plasmic-override={overrides.paragraph32}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.paragraph32
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "The world is your oyster, and you want nothing less than to enjoy it to the fullest extent. Maybe you're not into using inhalation devices but you've always been curious as to what all the hype is about. "
                        }
                      </React.Fragment>
                      {
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link__nGzRl
                          )}
                          component={Link}
                          href={
                            "https://blog.quittinghacks.com/disposable-offer" as const
                          }
                          platform={"nextjs"}
                        >
                          {"Sparq"}
                        </p.PlasmicLink>
                      }
                      <React.Fragment>
                        {
                          " offers the perfect option for the curious spirit: all of the enjoyment and flavors of traditional products/devices but without the harmful chemicals or addictive stimulants!\n\nNatural flavoring that is intensely delicious, vitamins, amino acids and botanicals, all wrapped in a device designed to provide a superior inhalation experience."
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                ) : null}
              </div>
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"h23"}
                data-plasmic-override={overrides.h23}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.h23
                )}
              >
                {"Vitamin Air is the Evolution of Inhalation"}
              </div>
            ) : null}
            {true ? (
              <p.PlasmicImg
                data-plasmic-name={"image3"}
                data-plasmic-override={overrides.image3}
                alt={""}
                className={classNames(sty.image3)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/comparepng2.png",
                  fullWidth: 1461,
                  fullHeight: 607,
                  aspectRatio: undefined
                }}
              />
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"paragraph4"}
                data-plasmic-override={overrides.paragraph4}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.paragraph4
                )}
              >
                {
                  "Get rid of those nic cravings whilst still enjoying that strong and intense throat hit.\n\nSatisfy your oral fixation without consuming toxic substances or harmful chemicals.\n\nReplace those harmful chemicals with vitamins, amino acids, and botanicals.\n\nPromote deep-breathing and relieve anxiety with each vitamin infused inhalation.\n\nEnjoy a healthier alternative without giving up your habit.\n\nTake your device everywhere with its ultramodern and compact design and use it anytime you want."
                }
              </div>
            ) : null}
            {true ? (
              <ol
                data-plasmic-name={"paragraph411"}
                data-plasmic-override={overrides.paragraph411}
                className={classNames(
                  projectcss.all,
                  projectcss.ol,
                  sty.paragraph411
                )}
              >
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li___5OoAw
                  )}
                >
                  {
                    "Get rid of those nic cravings whilst still enjoying that strong and intense throat hit."
                  }
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__bwmt
                  )}
                >
                  {
                    "Satisfy your oral fixation without consuming toxic substances or harmful chemicals."
                  }
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__mjKmm
                  )}
                >
                  {
                    "Replace those harmful chemicals with vitamins, amino acids, and botanicals."
                  }
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__q8OpJ
                  )}
                >
                  {
                    "Promote deep-breathing and relieve anxiety with each vitamin infused inhalation."
                  }
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li___3Hkg
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"Enjoy a "}</React.Fragment>
                    {
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link___8Hkf
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {"healthier alternative"}
                      </p.PlasmicLink>
                    }
                    <React.Fragment>
                      {" without giving up your habit."}
                    </React.Fragment>
                  </React.Fragment>
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__xbJv5
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"Take "}</React.Fragment>
                    {
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__df3KF
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {"your device"}
                      </p.PlasmicLink>
                    }
                    <React.Fragment>
                      {
                        " everywhere with its ultramodern and compact design and use it anytime you want."
                      }
                    </React.Fragment>
                  </React.Fragment>
                </li>
              </ol>
            ) : null}
            {true ? (
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__bw99K
                )}
                component={Link}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  data-plasmic-name={"image4"}
                  data-plasmic-override={overrides.image4}
                  alt={""}
                  className={classNames(sty.image4)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/zendrop/images/comparepng2.png",
                    fullWidth: 1461,
                    fullHeight: 607,
                    aspectRatio: undefined
                  }}
                />
              </p.PlasmicLink>
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"h24"}
                data-plasmic-override={overrides.h24}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.h24
                )}
              >
                {
                  "Happy Quitters, Vitamin Lovers, And Healthy Choice Followers Can't Stop Talking About Vitamin Air:"
                }
              </div>
            ) : null}
            <div
              data-plasmic-name={"review1"}
              data-plasmic-override={overrides.review1}
              className={classNames(projectcss.all, sty.review1)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__jo6ZJ)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/starpng.png",
                  fullWidth: 142,
                  fullHeight: 21,
                  aspectRatio: undefined
                }}
              />

              <div
                data-plasmic-name={"paragraph42"}
                data-plasmic-override={overrides.paragraph42}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.paragraph42
                )}
              >
                {"Amazing product for an amazing price"}
              </div>
              <div
                data-plasmic-name={"paragraph43"}
                data-plasmic-override={overrides.paragraph43}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.paragraph43
                )}
              >
                {
                  "If you are trying to quit then this is the product for you its amazing and worth every penny."
                }
              </div>
              <div
                data-plasmic-name={"paragraph44"}
                data-plasmic-override={overrides.paragraph44}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.paragraph44
                )}
              >
                {"Todd S."}
              </div>
            </div>
            <div
              data-plasmic-name={"review2"}
              data-plasmic-override={overrides.review2}
              className={classNames(projectcss.all, sty.review2)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___4QsxZ)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/starpng.png",
                  fullWidth: 142,
                  fullHeight: 21,
                  aspectRatio: undefined
                }}
              />

              <div
                data-plasmic-name={"paragraph45"}
                data-plasmic-override={overrides.paragraph45}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.paragraph45
                )}
              >
                {"Best friend as I quit cigs!"}
              </div>
              <div
                data-plasmic-name={"paragraph46"}
                data-plasmic-override={overrides.paragraph46}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.paragraph46
                )}
              >
                {
                  "I love the taste and it doesnt make me cough at all! Super nice product and cool packaging! I will be ordering again!"
                }
              </div>
              <div
                data-plasmic-name={"paragraph47"}
                data-plasmic-override={overrides.paragraph47}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.paragraph47
                )}
              >
                {"Jessica M."}
              </div>
            </div>
            <div
              data-plasmic-name={"review3"}
              data-plasmic-override={overrides.review3}
              className={classNames(projectcss.all, sty.review3)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__pjltH)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/starpng.png",
                  fullWidth: 142,
                  fullHeight: 21,
                  aspectRatio: undefined
                }}
              />

              <div
                data-plasmic-name={"paragraph48"}
                data-plasmic-override={overrides.paragraph48}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.paragraph48
                )}
              >
                {"Sparq was very refreshing and awesome"}
              </div>
              <div
                data-plasmic-name={"paragraph49"}
                data-plasmic-override={overrides.paragraph49}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.paragraph49
                )}
              >
                {
                  "My overall experience was fantastic. I loved the cleanliness of the vapor and how it tasted naturally fruity."
                }
              </div>
              <div
                data-plasmic-name={"paragraph410"}
                data-plasmic-override={overrides.paragraph410}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.paragraph410
                )}
              >
                {"Philip G."}
              </div>
            </div>
            <Embed
              className={classNames("__wab_instance", sty.embedHtml__y5C0P)}
              code={
                '<script src="https://fast.wistia.com/embed/medias/v0vj632tas.jsonp" async></script><script src="https://fast.wistia.com/assets/external/E-v1.js" async></script><div class="wistia_responsive_padding" style="padding:56.25% 0 0 0;position:relative;"><div class="wistia_responsive_wrapper" style="height:100%;left:0;position:absolute;top:0;width:100%;"><div class="wistia_embed wistia_async_v0vj632tas videoFoam=true" style="height:100%;position:relative;width:100%">&nbsp;</div></div></div>' as const
              }
            />

            <div
              data-plasmic-name={"paragraph23"}
              data-plasmic-override={overrides.paragraph23}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.paragraph23
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "No expense was spared regarding design and engineering.\n\nYou will happily find an "
                  }
                </React.Fragment>
                {
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link___0FCG
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"ultra-modern device"}
                  </p.PlasmicLink>
                }
                <React.Fragment>
                  {
                    ", comprised of real wood and stainless steel.\n\nNo plastic here\u2026.\n\nSparq\u2019s devices are slim, compact, odorless and easy to use anywhere."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__aNlE4
              )}
              component={Link}
              platform={"nextjs"}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__ex6Wj)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"eager" as const}
                src={{
                  src: "/plasmic/zendrop/images/sparqBoxAnimationLoopShorterVersiongif.gif",
                  fullWidth: 600,
                  fullHeight: 338,
                  aspectRatio: undefined
                }}
              />
            </p.PlasmicLink>
            <div
              data-plasmic-name={"paragraph24"}
              data-plasmic-override={overrides.paragraph24}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.paragraph24
              )}
            >
              <React.Fragment>
                <React.Fragment>{"Our "}</React.Fragment>
                {
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link__kxyCu
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"formulations"}
                  </p.PlasmicLink>
                }
                <React.Fragment>
                  {
                    " have undergone extensive lab testing proving it to be today\u2019s safest option.\n\nThe test results verified our all-natural, plant-based formulations are safe when heated."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__tj2FM
              )}
              component={Link}
              platform={"nextjs"}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__sNzdY)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"eager" as const}
                src={{
                  src: "/plasmic/zendrop/images/_12A7A7BbTestingSmallerImage10Yy0Fa000000000000028Png.png",
                  fullWidth: 1258,
                  fullHeight: 550,
                  aspectRatio: undefined
                }}
              />
            </p.PlasmicLink>
            <div
              data-plasmic-name={"paragraph25"}
              data-plasmic-override={overrides.paragraph25}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.paragraph25
              )}
            >
              <React.Fragment>
                <React.Fragment>{"Millions are turning to "}</React.Fragment>
                {
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link__ylyHr
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Vitamin Air"}
                  </p.PlasmicLink>
                }
                <React.Fragment>
                  {
                    " in their journey to quitting harmful and addictive, chemical-filled alternatives."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__pwc4
              )}
              component={Link}
              platform={"nextjs"}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__cz5H1)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"eager" as const}
                src={{
                  src: "/plasmic/zendrop/images/ladybaguette2020Img3156Edit2Jpg.jpg",
                  fullWidth: 4480,
                  fullHeight: 6720,
                  aspectRatio: undefined
                }}
              />
            </p.PlasmicLink>
            <div
              data-plasmic-name={"paragraph26"}
              data-plasmic-override={overrides.paragraph26}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.paragraph26
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "There\u2019s really no reason why you should not make the switch to "
                  }
                </React.Fragment>
                {
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link__l1NbK
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Sparq\u2019s Vitamin Air"}
                  </p.PlasmicLink>
                }
                <React.Fragment>
                  {
                    " today.\n\nTake the easiest step towards a healthier you and receive 1 FREE DEVICE with your first purchase, auto-applied at checkout."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"h25"}
              data-plasmic-override={overrides.h25}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.h25
              )}
            >
              {"Try all 3 formulations and..."}
            </div>
            <div
              data-plasmic-name={"h35"}
              data-plasmic-override={overrides.h35}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.h35
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {"We'll give you the 3rd device -"}
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#FF0000" }}
                >
                  {" FREE."}
                </span>
              </React.Fragment>
            </div>
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <div
                data-plasmic-name={"offerMobile"}
                data-plasmic-override={overrides.offerMobile}
                className={classNames(projectcss.all, sty.offerMobile)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__vrGl5)}>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__hZsn8
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___0Oxsk)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"120px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/zendrop/images/offersvg.svg",
                        fullWidth: 76,
                        fullHeight: 150,
                        aspectRatio: 0.503546
                      }}
                    />
                  </p.PlasmicLink>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__mvKdm)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aU1Ic
                    )}
                  >
                    {"SPECIAL OFFER"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oJxRv
                    )}
                  >
                    {"FREE VITAMIN AIR"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0Wuo7
                    )}
                  >
                    {
                      "Money-Back Guarantee: Better Flavor & Harder Hits or Your Money Back."
                    }
                  </div>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button___80K5L
                    )}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToCollection13"] = true
                        ? (() => {
                            const actionArgs = {};
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "navigation",
                                interactionUuid: "IVTnj3fAbE3h",
                                componentUuid: "tIekD3-XbimC"
                              },
                              () =>
                                (({ destination }) => {
                                  __nextRouter?.push(destination);
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["goToCollection13"] === "object" &&
                        typeof $steps["goToCollection13"].then === "function"
                      ) {
                        $steps["goToCollection13"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "navigation",
                            interactionUuid: "IVTnj3fAbE3h",
                            componentUuid: "tIekD3-XbimC"
                          },
                          $steps["goToCollection13"]
                        );
                      }
                    }}
                  >
                    {"CLAIM FREE DEVICE  \ud83d\udc49"}
                  </button>
                </div>
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div
                data-plasmic-name={"offerDesktop"}
                data-plasmic-override={overrides.offerDesktop}
                className={classNames(projectcss.all, sty.offerDesktop)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__tVuB)}>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__kHiU
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__xNlT)}
                      displayHeight={"423px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"300px" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/zendrop/images/offersvg.svg",
                        fullWidth: 76,
                        fullHeight: 150,
                        aspectRatio: 0.503546
                      }}
                    />
                  </p.PlasmicLink>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__ceFwv)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sRkqC
                    )}
                  >
                    {"SPECIAL OFFER"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__v1Zbb
                    )}
                  >
                    {"FREE VITAMIN AIR"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w17DY
                    )}
                  >
                    {
                      "Money-Back Guarantee: Better Flavor & Harder Hits or Your Money Back."
                    }
                  </div>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__zqwQe
                    )}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToCollection13"] = true
                        ? (() => {
                            const actionArgs = {};
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "navigation",
                                interactionUuid: "zyZudmgKZSlo",
                                componentUuid: "tIekD3-XbimC"
                              },
                              () =>
                                (({ destination }) => {
                                  __nextRouter?.push(destination);
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["goToCollection13"] === "object" &&
                        typeof $steps["goToCollection13"].then === "function"
                      ) {
                        $steps["goToCollection13"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "navigation",
                            interactionUuid: "zyZudmgKZSlo",
                            componentUuid: "tIekD3-XbimC"
                          },
                          $steps["goToCollection13"]
                        );
                      }
                    }}
                  >
                    {"CLAIM FREE DEVICE  \ud83d\udc49"}
                  </button>
                </div>
              </div>
            ) : null}
            {true ? (
              <Offer2
                data-plasmic-name={"offer2"}
                data-plasmic-override={overrides.offer2}
                className={classNames("__wab_instance", sty.offer2)}
                slot3={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yr2T
                    )}
                  >
                    {"SPECIAL OFFER"}
                  </div>
                }
                slot4={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lmh7N
                    )}
                  >
                    {"FREE VITAMIN AIR"}
                  </div>
                }
                slot5={
                  "Money-Back Guarantee: Better Flavor & Harder Hits or Your Money Back."
                }
                slot7={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ncuBg
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "CLAIM FREE DEVICE \ud83d\udc49"
                      : "CLAIM FREE DEVICE \ud83d\udc49"}
                  </div>
                }
              >
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__yPv8
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__rGulG)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("auto" as const)
                        : ("422px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/zendrop/images/offersvg.svg",
                      fullWidth: 76,
                      fullHeight: 150,
                      aspectRatio: 0.503546
                    }}
                  />
                </p.PlasmicLink>
              </Offer2>
            ) : null}
            {true ? (
              <p.PlasmicImg
                data-plasmic-name={"image5"}
                data-plasmic-override={overrides.image5}
                alt={""}
                className={classNames(sty.image5)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/comparepng2.png",
                  fullWidth: 1461,
                  fullHeight: 607,
                  aspectRatio: undefined
                }}
              />
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"paragraph6"}
                data-plasmic-override={overrides.paragraph6}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.paragraph6
                )}
              >
                {
                  "Get rid of those nicotine cravings whilst still enjoying that strong and intense throat hit.\n\nSatisfy your oral fixation without consuming toxic substances or harmful chemicals.\n\nReplace those harmful chemicals with vitamins, amino acids, and botanicals.\n\nPromote deep-breathing and relieve anxiety with each vitamin infused inhalation.\n\nEnjoy a healthier alternative without giving up your habit.\n\nTake your device everywhere with its ultramodern and compact design and use it anytime you want."
                }
              </div>
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"h26"}
                data-plasmic-override={overrides.h26}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.h26
                )}
              >
                {"FAQs"}
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__wAqUz)}>
                <div
                  data-plasmic-name={"faq1"}
                  data-plasmic-override={overrides.faq1}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.faq1
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700, color: "#000000" }}
                    >
                      {"Is Sparq Vitamin Air safe?"}
                    </span>
                    <React.Fragment>
                      {
                        "\n\nSparq Vitamin Air has been laboratory-tested in an ISO-17025 accredited lab and certified to be free of harmful chemicals. It is only made with organic, natural substances."
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__c5Lh6)}>
                <div
                  data-plasmic-name={"faq12"}
                  data-plasmic-override={overrides.faq12}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.faq12
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700, color: "#000000" }}
                    >
                      {"What are the ingredients used in Sparq Vitamin Air?"}
                    </span>
                    <React.Fragment>
                      {
                        "\n\nOur formulations do not contain nic or any addictive substances. We only use Organic Vegetable Glycerin and Natural Flavoring as our base, combined with the highest quality, U.S. sourced vitamins, amino acids and botanicals."
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__iAnmw)}>
                <div
                  data-plasmic-name={"faq13"}
                  data-plasmic-override={overrides.faq13}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.faq13
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700, color: "#000000" }}
                    >
                      {"How do I use Sparq Vitamin Air?"}
                    </span>
                    <React.Fragment>
                      {
                        "\n\nTo use Sparq Vitamin Air, simply lift the device from the packaging, remove the protective silicone caps, place the wooden end of the device in your mouth and inhale. The LED will illuminate to indicate suctio."
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__ffNhh)}>
                <div
                  data-plasmic-name={"faq14"}
                  data-plasmic-override={overrides.faq14}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.faq14
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700, color: "#000000" }}
                    >
                      {"How long does it last?"}
                    </span>
                    <React.Fragment>
                      {
                        "\n\nEach Sparq device will provide 300 puffs or more, depending on how it is used. The built-in LED will blink for 2 seconds when the juice is about to run out."
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__pwkb6)}>
                <div
                  data-plasmic-name={"faq15"}
                  data-plasmic-override={overrides.faq15}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.faq15
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700, color: "#000000" }}
                    >
                      {"What materials is Sparq made from?"}
                    </span>
                    <React.Fragment>
                      {
                        "\n\nOur Sparq Vitamin Air is 100% recyclable. It is made of a biodegradable body of wood, stainless steel and food-grade silicone and it's powered by a lithium battery."
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </div>
            ) : null}
            {true ? (
              <p.PlasmicImg
                data-plasmic-name={"image6"}
                data-plasmic-override={overrides.image6}
                alt={""}
                className={classNames(sty.image6)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/comparepng2.png",
                  fullWidth: 1461,
                  fullHeight: 607,
                  aspectRatio: undefined
                }}
              />
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"h27"}
                data-plasmic-override={overrides.h27}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.h27
                )}
              >
                {
                  "Now you don't have to choose between either Strawberry or Vanilla flavor. "
                }
              </div>
            ) : null}
            {true ? (
              <p.PlasmicImg
                data-plasmic-name={"image7"}
                data-plasmic-override={overrides.image7}
                alt={""}
                className={classNames(sty.image7)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/comparepng2.png",
                  fullWidth: 1461,
                  fullHeight: 607,
                  aspectRatio: undefined
                }}
              />
            ) : null}
            <p.PlasmicLink
              data-plasmic-name={"aOutroH1"}
              data-plasmic-override={overrides.aOutroH1}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.aOutroH1
              )}
              component={Link}
              platform={"nextjs"}
            >
              {"Click Here To Shop Vitamin Air Today!"}
            </p.PlasmicLink>
            <div className={classNames(projectcss.all, sty.freeBox__fZDec)}>
              <p.PlasmicLink
                data-plasmic-name={"aCta2"}
                data-plasmic-override={overrides.aCta2}
                className={classNames(projectcss.all, projectcss.a, sty.aCta2)}
                component={Link}
                onClick={async event => {
                  const $steps = {};
                  $steps["setVariable"] = true
                    ? (() => {
                        const actionArgs = {};
                        return __wrapUserFunction(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariable",
                            interactionUuid: "yHY4PlczadMH",
                            componentUuid: "tIekD3-XbimC"
                          },
                          () =>
                            (({ variable, value, startIndex, deleteCount }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              undefined;
                            })?.apply(null, [actionArgs]),
                          actionArgs
                        );
                      })()
                    : undefined;
                  if (
                    typeof $steps["setVariable"] === "object" &&
                    typeof $steps["setVariable"].then === "function"
                  ) {
                    $steps["setVariable"] = await __wrapUserPromise(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariable",
                        interactionUuid: "yHY4PlczadMH",
                        componentUuid: "tIekD3-XbimC"
                      },
                      $steps["setVariable"]
                    );
                  }
                }}
                platform={"nextjs"}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "CLAIM FREE DEVICE \ud83d\udc49",
                  value: args.slot7,
                  className: classNames(sty.slotTargetSlot7)
                })}
              </p.PlasmicLink>
              <div className={classNames(projectcss.all, sty.freeBox__lkyd6)} />

              <div className={classNames(projectcss.all, sty.freeBox__pdhLd)}>
                <div
                  data-plasmic-name={"aOutroH2"}
                  data-plasmic-override={overrides.aOutroH2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.aOutroH2
                  )}
                >
                  {"Fast Same-Day Shipping"}
                </div>
                <p.PlasmicImg
                  data-plasmic-name={"reviewIcon"}
                  data-plasmic-override={overrides.reviewIcon}
                  alt={""}
                  className={classNames(sty.reviewIcon)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("11px" as const)
                      : ("auto" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/zendrop/images/starpng.png",
                    fullWidth: 142,
                    fullHeight: 21,
                    aspectRatio: undefined
                  }}
                />

                <div
                  data-plasmic-name={"aOutroH3"}
                  data-plasmic-override={overrides.aOutroH3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.aOutroH3
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"Rated 4.9 Stars By "}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"100,000+"}
                    </span>
                    <React.Fragment>{" Customers"}</React.Fragment>
                  </React.Fragment>
                </div>
              </div>
            </div>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link___7QYko
              )}
              component={Link}
              platform={"nextjs"}
            >
              <p.PlasmicImg
                data-plasmic-name={"aOutroImage"}
                data-plasmic-override={overrides.aOutroImage}
                alt={""}
                className={classNames(sty.aOutroImage)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"eager" as const}
                src={{
                  src: "/plasmic/zendrop/images/img3592Edit1Jpg.jpg",
                  fullWidth: 4480,
                  fullHeight: 6720,
                  aspectRatio: undefined
                }}
              />
            </p.PlasmicLink>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___266L0)}>
            <div className={classNames(projectcss.all, sty.freeBox__dli0)}>
              <p.PlasmicImg
                data-plasmic-name={"reviewMugshot1"}
                data-plasmic-override={overrides.reviewMugshot1}
                alt={""}
                className={classNames(sty.reviewMugshot1)}
                displayHeight={"100px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/sidereview1Pngpng.png",
                  fullWidth: 101,
                  fullHeight: 101,
                  aspectRatio: undefined
                }}
              />

              <div
                data-plasmic-name={"reviewName1"}
                data-plasmic-override={overrides.reviewName1}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.reviewName1
                )}
              >
                {"Isaiah S."}
              </div>
              <p.PlasmicImg
                data-plasmic-name={"reviewIcon3"}
                data-plasmic-override={overrides.reviewIcon3}
                alt={""}
                className={classNames(sty.reviewIcon3)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/starpng.png",
                  fullWidth: 142,
                  fullHeight: 21,
                  aspectRatio: undefined
                }}
              />

              <div
                data-plasmic-name={"reviewH11"}
                data-plasmic-override={overrides.reviewH11}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.reviewH11
                )}
              >
                {"BEST ALTERNATIVE"}
              </div>
              <div
                data-plasmic-name={"reviewP1"}
                data-plasmic-override={overrides.reviewP1}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.reviewP1
                )}
              >
                {
                  "I smoked for over 29 years and tired to quit several times with no success. Until I came across sparq. Now not only do I not quit, I\u2019m doing something healthy in place! Great product, I\u2019ll be a user for life!"
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___4XiXo)}>
              <p.PlasmicImg
                data-plasmic-name={"reviewMugshot2"}
                data-plasmic-override={overrides.reviewMugshot2}
                alt={""}
                className={classNames(sty.reviewMugshot2)}
                displayHeight={"100px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/sidereview2Pngpng.png",
                  fullWidth: 101,
                  fullHeight: 101,
                  aspectRatio: undefined
                }}
              />

              <div
                data-plasmic-name={"reviewName2"}
                data-plasmic-override={overrides.reviewName2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.reviewName2
                )}
              >
                {"Jason G."}
              </div>
              <p.PlasmicImg
                data-plasmic-name={"reviewIcon4"}
                data-plasmic-override={overrides.reviewIcon4}
                alt={""}
                className={classNames(sty.reviewIcon4)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/starpng.png",
                  fullWidth: 142,
                  fullHeight: 21,
                  aspectRatio: undefined
                }}
              />

              <div
                data-plasmic-name={"reviewH12"}
                data-plasmic-override={overrides.reviewH12}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.reviewH12
                )}
              >
                {"AWESOME"}
              </div>
              <div
                data-plasmic-name={"reviewP2"}
                data-plasmic-override={overrides.reviewP2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.reviewP2
                )}
              >
                {
                  "Excellent. I love this. I quit cigs and went to the sparq. I love this device. It is natural, no nic. It really does help calm me."
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__tqw7W)}>
              <p.PlasmicImg
                data-plasmic-name={"reviewMugshot3"}
                data-plasmic-override={overrides.reviewMugshot3}
                alt={""}
                className={classNames(sty.reviewMugshot3)}
                displayHeight={"100px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/divpng.png",
                  fullWidth: 101,
                  fullHeight: 101,
                  aspectRatio: undefined
                }}
              />

              <div
                data-plasmic-name={"reviewName3"}
                data-plasmic-override={overrides.reviewName3}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.reviewName3
                )}
              >
                {"Kathy B"}
              </div>
              <p.PlasmicImg
                data-plasmic-name={"reviewIcon5"}
                data-plasmic-override={overrides.reviewIcon5}
                alt={""}
                className={classNames(sty.reviewIcon5)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/starpng.png",
                  fullWidth: 142,
                  fullHeight: 21,
                  aspectRatio: undefined
                }}
              />

              <div
                data-plasmic-name={"reviewH122"}
                data-plasmic-override={overrides.reviewH122}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.reviewH122
                )}
              >
                {"LOVE! LOVE!!"}
              </div>
              <div
                data-plasmic-name={"reviewP3"}
                data-plasmic-override={overrides.reviewP3}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.reviewP3
                )}
              >
                {
                  "\u201cIm literally obsessed the the elegant\ndesign as well as the jaw dropping\npackaging.\u201d"
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__jutt0)}>
              <p.PlasmicImg
                data-plasmic-name={"reviewIcon6"}
                data-plasmic-override={overrides.reviewIcon6}
                alt={""}
                className={classNames(sty.reviewIcon6)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/zendrop/images/starpng.png",
                  fullWidth: 142,
                  fullHeight: 21,
                  aspectRatio: undefined
                }}
              />

              <div
                data-plasmic-name={"reviewStatement"}
                data-plasmic-override={overrides.reviewStatement}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.reviewStatement
                )}
              >
                <React.Fragment>
                  <React.Fragment>{"Rated 4.9 Stars By "}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"100,000+"}
                  </span>
                  <React.Fragment>{" Customers"}</React.Fragment>
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"ctaCardH1"}
                data-plasmic-override={overrides.ctaCardH1}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.ctaCardH1
                )}
              >
                {"So What Are You Waiting For?"}
              </div>
              <div
                data-plasmic-name={"ctaCardH2"}
                data-plasmic-override={overrides.ctaCardH2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.ctaCardH2
                )}
              >
                {
                  "Take the first and easiest step towards quitting and receive a FREE device with your order."
                }
              </div>
              <p.PlasmicLink
                data-plasmic-name={"aCta3"}
                data-plasmic-override={overrides.aCta3}
                className={classNames(projectcss.all, projectcss.a, sty.aCta3)}
                component={Link}
                onClick={async event => {
                  const $steps = {};
                  $steps["setVariable"] = true
                    ? (() => {
                        const actionArgs = {};
                        return __wrapUserFunction(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariable",
                            interactionUuid: "2_-sYIozuQTU",
                            componentUuid: "tIekD3-XbimC"
                          },
                          () =>
                            (({ variable, value, startIndex, deleteCount }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              undefined;
                            })?.apply(null, [actionArgs]),
                          actionArgs
                        );
                      })()
                    : undefined;
                  if (
                    typeof $steps["setVariable"] === "object" &&
                    typeof $steps["setVariable"].then === "function"
                  ) {
                    $steps["setVariable"] = await __wrapUserPromise(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariable",
                        interactionUuid: "2_-sYIozuQTU",
                        componentUuid: "tIekD3-XbimC"
                      },
                      $steps["setVariable"]
                    );
                  }
                }}
                platform={"nextjs"}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "CLAIM FREE DEVICE \ud83d\udc49",
                  value: args.slot9,
                  className: classNames(sty.slotTargetSlot9)
                })}
              </p.PlasmicLink>
            </div>
          </div>
        </div>
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.columns__cdgSb)}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div
                data-plasmic-name={"article"}
                data-plasmic-override={overrides.article}
                className={classNames(projectcss.all, sty.article)}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div
                data-plasmic-name={"reviews"}
                data-plasmic-override={overrides.reviews}
                className={classNames(projectcss.all, sty.reviews)}
              />
            ) : null}
          </p.Stack>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "nav",
    "logo",
    "aSlogan",
    "intro",
    "heroHeadline",
    "heroSubHeadline",
    "aCta",
    "reviewIcon2",
    "reviewStatement2",
    "body",
    "articleBody",
    "press",
    "pressIcons",
    "paragraph1",
    "heroImage",
    "h21",
    "paragraph2",
    "h22",
    "paragraph22",
    "image2",
    "paragraph31",
    "paragraph32",
    "h23",
    "image3",
    "paragraph4",
    "paragraph411",
    "image4",
    "h24",
    "review1",
    "paragraph42",
    "paragraph43",
    "paragraph44",
    "review2",
    "paragraph45",
    "paragraph46",
    "paragraph47",
    "review3",
    "paragraph48",
    "paragraph49",
    "paragraph410",
    "paragraph23",
    "paragraph24",
    "paragraph25",
    "paragraph26",
    "h25",
    "h35",
    "offerMobile",
    "offerDesktop",
    "offer2",
    "image5",
    "paragraph6",
    "h26",
    "faq1",
    "faq12",
    "faq13",
    "faq14",
    "faq15",
    "image6",
    "h27",
    "image7",
    "aOutroH1",
    "aCta2",
    "aOutroH2",
    "reviewIcon",
    "aOutroH3",
    "aOutroImage",
    "reviewMugshot1",
    "reviewName1",
    "reviewIcon3",
    "reviewH11",
    "reviewP1",
    "reviewMugshot2",
    "reviewName2",
    "reviewIcon4",
    "reviewH12",
    "reviewP2",
    "reviewMugshot3",
    "reviewName3",
    "reviewIcon5",
    "reviewH122",
    "reviewP3",
    "reviewIcon6",
    "reviewStatement",
    "ctaCardH1",
    "ctaCardH2",
    "aCta3",
    "article",
    "reviews"
  ],
  nav: ["nav", "logo", "aSlogan"],
  logo: ["logo"],
  aSlogan: ["aSlogan"],
  intro: [
    "intro",
    "heroHeadline",
    "heroSubHeadline",
    "aCta",
    "reviewIcon2",
    "reviewStatement2"
  ],
  heroHeadline: ["heroHeadline"],
  heroSubHeadline: ["heroSubHeadline"],
  aCta: ["aCta"],
  reviewIcon2: ["reviewIcon2"],
  reviewStatement2: ["reviewStatement2"],
  body: [
    "body",
    "articleBody",
    "press",
    "pressIcons",
    "paragraph1",
    "heroImage",
    "h21",
    "paragraph2",
    "h22",
    "paragraph22",
    "image2",
    "paragraph31",
    "paragraph32",
    "h23",
    "image3",
    "paragraph4",
    "paragraph411",
    "image4",
    "h24",
    "review1",
    "paragraph42",
    "paragraph43",
    "paragraph44",
    "review2",
    "paragraph45",
    "paragraph46",
    "paragraph47",
    "review3",
    "paragraph48",
    "paragraph49",
    "paragraph410",
    "paragraph23",
    "paragraph24",
    "paragraph25",
    "paragraph26",
    "h25",
    "h35",
    "offerMobile",
    "offerDesktop",
    "offer2",
    "image5",
    "paragraph6",
    "h26",
    "faq1",
    "faq12",
    "faq13",
    "faq14",
    "faq15",
    "image6",
    "h27",
    "image7",
    "aOutroH1",
    "aCta2",
    "aOutroH2",
    "reviewIcon",
    "aOutroH3",
    "aOutroImage",
    "reviewMugshot1",
    "reviewName1",
    "reviewIcon3",
    "reviewH11",
    "reviewP1",
    "reviewMugshot2",
    "reviewName2",
    "reviewIcon4",
    "reviewH12",
    "reviewP2",
    "reviewMugshot3",
    "reviewName3",
    "reviewIcon5",
    "reviewH122",
    "reviewP3",
    "reviewIcon6",
    "reviewStatement",
    "ctaCardH1",
    "ctaCardH2",
    "aCta3",
    "article",
    "reviews"
  ],
  articleBody: [
    "articleBody",
    "press",
    "pressIcons",
    "paragraph1",
    "heroImage",
    "h21",
    "paragraph2",
    "h22",
    "paragraph22",
    "image2",
    "paragraph31",
    "paragraph32",
    "h23",
    "image3",
    "paragraph4",
    "paragraph411",
    "image4",
    "h24",
    "review1",
    "paragraph42",
    "paragraph43",
    "paragraph44",
    "review2",
    "paragraph45",
    "paragraph46",
    "paragraph47",
    "review3",
    "paragraph48",
    "paragraph49",
    "paragraph410",
    "paragraph23",
    "paragraph24",
    "paragraph25",
    "paragraph26",
    "h25",
    "h35",
    "offerMobile",
    "offerDesktop",
    "offer2",
    "image5",
    "paragraph6",
    "h26",
    "faq1",
    "faq12",
    "faq13",
    "faq14",
    "faq15",
    "image6",
    "h27",
    "image7",
    "aOutroH1",
    "aCta2",
    "aOutroH2",
    "reviewIcon",
    "aOutroH3",
    "aOutroImage"
  ],
  press: ["press", "pressIcons"],
  pressIcons: ["pressIcons"],
  paragraph1: ["paragraph1"],
  heroImage: ["heroImage"],
  h21: ["h21"],
  paragraph2: ["paragraph2"],
  h22: ["h22"],
  paragraph22: ["paragraph22"],
  image2: ["image2"],
  paragraph31: ["paragraph31"],
  paragraph32: ["paragraph32"],
  h23: ["h23"],
  image3: ["image3"],
  paragraph4: ["paragraph4"],
  paragraph411: ["paragraph411"],
  image4: ["image4"],
  h24: ["h24"],
  review1: ["review1", "paragraph42", "paragraph43", "paragraph44"],
  paragraph42: ["paragraph42"],
  paragraph43: ["paragraph43"],
  paragraph44: ["paragraph44"],
  review2: ["review2", "paragraph45", "paragraph46", "paragraph47"],
  paragraph45: ["paragraph45"],
  paragraph46: ["paragraph46"],
  paragraph47: ["paragraph47"],
  review3: ["review3", "paragraph48", "paragraph49", "paragraph410"],
  paragraph48: ["paragraph48"],
  paragraph49: ["paragraph49"],
  paragraph410: ["paragraph410"],
  paragraph23: ["paragraph23"],
  paragraph24: ["paragraph24"],
  paragraph25: ["paragraph25"],
  paragraph26: ["paragraph26"],
  h25: ["h25"],
  h35: ["h35"],
  offerMobile: ["offerMobile"],
  offerDesktop: ["offerDesktop"],
  offer2: ["offer2"],
  image5: ["image5"],
  paragraph6: ["paragraph6"],
  h26: ["h26"],
  faq1: ["faq1"],
  faq12: ["faq12"],
  faq13: ["faq13"],
  faq14: ["faq14"],
  faq15: ["faq15"],
  image6: ["image6"],
  h27: ["h27"],
  image7: ["image7"],
  aOutroH1: ["aOutroH1"],
  aCta2: ["aCta2"],
  aOutroH2: ["aOutroH2"],
  reviewIcon: ["reviewIcon"],
  aOutroH3: ["aOutroH3"],
  aOutroImage: ["aOutroImage"],
  reviewMugshot1: ["reviewMugshot1"],
  reviewName1: ["reviewName1"],
  reviewIcon3: ["reviewIcon3"],
  reviewH11: ["reviewH11"],
  reviewP1: ["reviewP1"],
  reviewMugshot2: ["reviewMugshot2"],
  reviewName2: ["reviewName2"],
  reviewIcon4: ["reviewIcon4"],
  reviewH12: ["reviewH12"],
  reviewP2: ["reviewP2"],
  reviewMugshot3: ["reviewMugshot3"],
  reviewName3: ["reviewName3"],
  reviewIcon5: ["reviewIcon5"],
  reviewH122: ["reviewH122"],
  reviewP3: ["reviewP3"],
  reviewIcon6: ["reviewIcon6"],
  reviewStatement: ["reviewStatement"],
  ctaCardH1: ["ctaCardH1"],
  ctaCardH2: ["ctaCardH2"],
  aCta3: ["aCta3"],
  article: ["article"],
  reviews: ["reviews"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  nav: "div";
  logo: typeof p.PlasmicImg;
  aSlogan: "div";
  intro: "div";
  heroHeadline: "div";
  heroSubHeadline: "div";
  aCta: "a";
  reviewIcon2: typeof p.PlasmicImg;
  reviewStatement2: "div";
  body: "div";
  articleBody: "div";
  press: "div";
  pressIcons: typeof p.PlasmicImg;
  paragraph1: "div";
  heroImage: typeof p.PlasmicImg;
  h21: "div";
  paragraph2: "div";
  h22: "div";
  paragraph22: "div";
  image2: typeof p.PlasmicImg;
  paragraph31: "div";
  paragraph32: "div";
  h23: "div";
  image3: typeof p.PlasmicImg;
  paragraph4: "div";
  paragraph411: "ol";
  image4: typeof p.PlasmicImg;
  h24: "div";
  review1: "div";
  paragraph42: "div";
  paragraph43: "div";
  paragraph44: "div";
  review2: "div";
  paragraph45: "div";
  paragraph46: "div";
  paragraph47: "div";
  review3: "div";
  paragraph48: "div";
  paragraph49: "div";
  paragraph410: "div";
  paragraph23: "div";
  paragraph24: "div";
  paragraph25: "div";
  paragraph26: "div";
  h25: "div";
  h35: "div";
  offerMobile: "div";
  offerDesktop: "div";
  offer2: typeof Offer2;
  image5: typeof p.PlasmicImg;
  paragraph6: "div";
  h26: "div";
  faq1: "div";
  faq12: "div";
  faq13: "div";
  faq14: "div";
  faq15: "div";
  image6: typeof p.PlasmicImg;
  h27: "div";
  image7: typeof p.PlasmicImg;
  aOutroH1: "a";
  aCta2: "a";
  aOutroH2: "div";
  reviewIcon: typeof p.PlasmicImg;
  aOutroH3: "div";
  aOutroImage: typeof p.PlasmicImg;
  reviewMugshot1: typeof p.PlasmicImg;
  reviewName1: "div";
  reviewIcon3: typeof p.PlasmicImg;
  reviewH11: "div";
  reviewP1: "div";
  reviewMugshot2: typeof p.PlasmicImg;
  reviewName2: "div";
  reviewIcon4: typeof p.PlasmicImg;
  reviewH12: "div";
  reviewP2: "div";
  reviewMugshot3: typeof p.PlasmicImg;
  reviewName3: "div";
  reviewIcon5: typeof p.PlasmicImg;
  reviewH122: "div";
  reviewP3: "div";
  reviewIcon6: typeof p.PlasmicImg;
  reviewStatement: "div";
  ctaCardH1: "div";
  ctaCardH2: "div";
  aCta3: "a";
  article: "div";
  reviews: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCwAdvert2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCwAdvert2__VariantsArgs;
    args?: PlasmicCwAdvert2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCwAdvert2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCwAdvert2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCwAdvert2__ArgProps,
          internalVariantPropNames: PlasmicCwAdvert2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCwAdvert2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCwAdvert2";
  } else {
    func.displayName = `PlasmicCwAdvert2.${nodeName}`;
  }
  return func;
}

export const PlasmicCwAdvert2 = Object.assign(
  // Top-level PlasmicCwAdvert2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    nav: makeNodeComponent("nav"),
    logo: makeNodeComponent("logo"),
    aSlogan: makeNodeComponent("aSlogan"),
    intro: makeNodeComponent("intro"),
    heroHeadline: makeNodeComponent("heroHeadline"),
    heroSubHeadline: makeNodeComponent("heroSubHeadline"),
    aCta: makeNodeComponent("aCta"),
    reviewIcon2: makeNodeComponent("reviewIcon2"),
    reviewStatement2: makeNodeComponent("reviewStatement2"),
    body: makeNodeComponent("body"),
    articleBody: makeNodeComponent("articleBody"),
    press: makeNodeComponent("press"),
    pressIcons: makeNodeComponent("pressIcons"),
    paragraph1: makeNodeComponent("paragraph1"),
    heroImage: makeNodeComponent("heroImage"),
    h21: makeNodeComponent("h21"),
    paragraph2: makeNodeComponent("paragraph2"),
    h22: makeNodeComponent("h22"),
    paragraph22: makeNodeComponent("paragraph22"),
    image2: makeNodeComponent("image2"),
    paragraph31: makeNodeComponent("paragraph31"),
    paragraph32: makeNodeComponent("paragraph32"),
    h23: makeNodeComponent("h23"),
    image3: makeNodeComponent("image3"),
    paragraph4: makeNodeComponent("paragraph4"),
    paragraph411: makeNodeComponent("paragraph411"),
    image4: makeNodeComponent("image4"),
    h24: makeNodeComponent("h24"),
    review1: makeNodeComponent("review1"),
    paragraph42: makeNodeComponent("paragraph42"),
    paragraph43: makeNodeComponent("paragraph43"),
    paragraph44: makeNodeComponent("paragraph44"),
    review2: makeNodeComponent("review2"),
    paragraph45: makeNodeComponent("paragraph45"),
    paragraph46: makeNodeComponent("paragraph46"),
    paragraph47: makeNodeComponent("paragraph47"),
    review3: makeNodeComponent("review3"),
    paragraph48: makeNodeComponent("paragraph48"),
    paragraph49: makeNodeComponent("paragraph49"),
    paragraph410: makeNodeComponent("paragraph410"),
    paragraph23: makeNodeComponent("paragraph23"),
    paragraph24: makeNodeComponent("paragraph24"),
    paragraph25: makeNodeComponent("paragraph25"),
    paragraph26: makeNodeComponent("paragraph26"),
    h25: makeNodeComponent("h25"),
    h35: makeNodeComponent("h35"),
    offerMobile: makeNodeComponent("offerMobile"),
    offerDesktop: makeNodeComponent("offerDesktop"),
    offer2: makeNodeComponent("offer2"),
    image5: makeNodeComponent("image5"),
    paragraph6: makeNodeComponent("paragraph6"),
    h26: makeNodeComponent("h26"),
    faq1: makeNodeComponent("faq1"),
    faq12: makeNodeComponent("faq12"),
    faq13: makeNodeComponent("faq13"),
    faq14: makeNodeComponent("faq14"),
    faq15: makeNodeComponent("faq15"),
    image6: makeNodeComponent("image6"),
    h27: makeNodeComponent("h27"),
    image7: makeNodeComponent("image7"),
    aOutroH1: makeNodeComponent("aOutroH1"),
    aCta2: makeNodeComponent("aCta2"),
    aOutroH2: makeNodeComponent("aOutroH2"),
    reviewIcon: makeNodeComponent("reviewIcon"),
    aOutroH3: makeNodeComponent("aOutroH3"),
    aOutroImage: makeNodeComponent("aOutroImage"),
    reviewMugshot1: makeNodeComponent("reviewMugshot1"),
    reviewName1: makeNodeComponent("reviewName1"),
    reviewIcon3: makeNodeComponent("reviewIcon3"),
    reviewH11: makeNodeComponent("reviewH11"),
    reviewP1: makeNodeComponent("reviewP1"),
    reviewMugshot2: makeNodeComponent("reviewMugshot2"),
    reviewName2: makeNodeComponent("reviewName2"),
    reviewIcon4: makeNodeComponent("reviewIcon4"),
    reviewH12: makeNodeComponent("reviewH12"),
    reviewP2: makeNodeComponent("reviewP2"),
    reviewMugshot3: makeNodeComponent("reviewMugshot3"),
    reviewName3: makeNodeComponent("reviewName3"),
    reviewIcon5: makeNodeComponent("reviewIcon5"),
    reviewH122: makeNodeComponent("reviewH122"),
    reviewP3: makeNodeComponent("reviewP3"),
    reviewIcon6: makeNodeComponent("reviewIcon6"),
    reviewStatement: makeNodeComponent("reviewStatement"),
    ctaCardH1: makeNodeComponent("ctaCardH1"),
    ctaCardH2: makeNodeComponent("ctaCardH2"),
    aCta3: makeNodeComponent("aCta3"),
    article: makeNodeComponent("article"),
    reviews: makeNodeComponent("reviews"),

    // Metadata about props expected for PlasmicCwAdvert2
    internalVariantProps: PlasmicCwAdvert2__VariantProps,
    internalArgProps: PlasmicCwAdvert2__ArgProps
  }
);

export default PlasmicCwAdvert2;
/* prettier-ignore-end */
