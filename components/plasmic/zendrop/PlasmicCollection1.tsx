// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4UKWsAMfUC1kEuLgBvknC
// Component: _5P11KHEm1uX

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_zendrop.module.css"; // plasmic-import: 4UKWsAMfUC1kEuLgBvknC/projectcss
import sty from "./PlasmicCollection1.module.css"; // plasmic-import: _5P11KHEm1uX/css

createPlasmicElementProxy;

export type PlasmicCollection1__VariantMembers = {};
export type PlasmicCollection1__VariantsArgs = {};
type VariantPropType = keyof PlasmicCollection1__VariantsArgs;
export const PlasmicCollection1__VariantProps = new Array<VariantPropType>();

export type PlasmicCollection1__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCollection1__ArgsType;
export const PlasmicCollection1__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3",
  "slot4",
  "slot5",
  "slot6",
  "slot7",
  "slot8",
  "slot9"
);

export type PlasmicCollection1__OverridesType = {
  root?: p.Flex<"div">;
  columns?: p.Flex<"div">;
};

export interface DefaultCollection1Props {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCollection1__RenderFunc(props: {
  variants: PlasmicCollection1__VariantsArgs;
  args: PlasmicCollection1__ArgsType;
  overrides: PlasmicCollection1__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox___1Srmc)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img___1E5F6)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100%" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/zendrop/images/productVariety1C2E7Bd9Ac9C4989Bfad811526Dad7E0250X2502Xjpgpng.png",
                fullWidth: 387,
                fullHeight: 442,
                aspectRatio: undefined
              }}
            />
          ),

          value: args.children
        })}
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__q2Qg7)}>
        {p.renderPlasmicSlot({
          defaultContents: "VITAMIN AIR 3-PACK",
          value: args.slot,
          className: classNames(sty.slotTargetSlot)
        })}
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__iRwRm)}>
        {p.renderPlasmicSlot({
          defaultContents: "\u2605\u2605\u2605\u2605\u2605 (447)",
          value: args.slot2,
          className: classNames(sty.slotTargetSlot2)
        })}
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___6PTd)}>
        {p.renderPlasmicSlot({
          defaultContents: "$98 + FREE SHIPPING",
          value: args.slot9,
          className: classNames(sty.slotTargetSlot9)
        })}
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__hAd)}>
        {p.renderPlasmicSlot({
          defaultContents: "(One of each formulation)",
          value: args.slot3,
          className: classNames(sty.slotTargetSlot3)
        })}
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__irktv)}>
        {p.renderPlasmicSlot({
          defaultContents: "CHOOSE FLAVOR",
          value: args.slot4,
          className: classNames(sty.slotTargetSlot4)
        })}
      </div>
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__wnhMk)}>
          <div className={classNames(projectcss.all, sty.freeBox__lUpdd)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__kTGZ)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"32px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/zendrop/images/labelsvg.svg",
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1
                  }}
                />
              ),

              value: args.slot5
            })}
            <div className={classNames(projectcss.all, sty.freeBox__evZmV)}>
              {p.renderPlasmicSlot({
                defaultContents: "strawberry",
                value: args.slot6,
                className: classNames(sty.slotTargetSlot6)
              })}
            </div>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.column___71IVw)}>
          <div className={classNames(projectcss.all, sty.freeBox__xIiy)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__x1AwB)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"32px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/zendrop/images/labelsvg2.svg",
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1
                  }}
                />
              ),

              value: args.slot7
            })}
            <div className={classNames(projectcss.all, sty.freeBox__c06UY)}>
              {p.renderPlasmicSlot({
                defaultContents: "vanilla",
                value: args.slot8,
                className: classNames(sty.slotTargetSlot8)
              })}
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns"],
  columns: ["columns"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCollection1__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCollection1__VariantsArgs;
    args?: PlasmicCollection1__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCollection1__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCollection1__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCollection1__ArgProps,
          internalVariantPropNames: PlasmicCollection1__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCollection1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCollection1";
  } else {
    func.displayName = `PlasmicCollection1.${nodeName}`;
  }
  return func;
}

export const PlasmicCollection1 = Object.assign(
  // Top-level PlasmicCollection1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),

    // Metadata about props expected for PlasmicCollection1
    internalVariantProps: PlasmicCollection1__VariantProps,
    internalArgProps: PlasmicCollection1__ArgProps
  }
);

export default PlasmicCollection1;
/* prettier-ignore-end */
