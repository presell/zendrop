// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4UKWsAMfUC1kEuLgBvknC
// Component: vSo40ok56JX

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsjZPl8KLomlJe } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jZPl8KLomlJe/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_zendrop.module.css"; // plasmic-import: 4UKWsAMfUC1kEuLgBvknC/projectcss
import sty from "./PlasmicValueStack2.module.css"; // plasmic-import: vSo40ok56JX/css

createPlasmicElementProxy;

export type PlasmicValueStack2__VariantMembers = {};
export type PlasmicValueStack2__VariantsArgs = {};
type VariantPropType = keyof PlasmicValueStack2__VariantsArgs;
export const PlasmicValueStack2__VariantProps = new Array<VariantPropType>();

export type PlasmicValueStack2__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
  children2?: React.ReactNode;
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
  slot10?: React.ReactNode;
  slot11?: React.ReactNode;
  slot12?: React.ReactNode;
};
type ArgPropType = keyof PlasmicValueStack2__ArgsType;
export const PlasmicValueStack2__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3",
  "slot4",
  "slot5",
  "slot6",
  "children2",
  "slot7",
  "slot8",
  "slot9",
  "slot10",
  "slot11",
  "slot12"
);

export type PlasmicValueStack2__OverridesType = {
  root?: p.Flex<"div">;
  desktop?: p.Flex<"div">;
  mobile?: p.Flex<"div">;
};

export interface DefaultValueStack2Props {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
  children2?: React.ReactNode;
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
  slot10?: React.ReactNode;
  slot11?: React.ReactNode;
  slot12?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicValueStack2__RenderFunc(props: {
  variants: PlasmicValueStack2__VariantsArgs;
  args: PlasmicValueStack2__ArgsType;
  overrides: PlasmicValueStack2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjZPl8KLomlJe()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <div
          data-plasmic-name={"desktop"}
          data-plasmic-override={overrides.desktop}
          className={classNames(projectcss.all, sty.desktop)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__jvPmi)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__unCzf)}>
                {true ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__pAoay)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                  />
                ) : null}
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__t6Aug)}>
              <div className={classNames(projectcss.all, sty.freeBox__xFSx)}>
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__riywr
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#636363" }}
                        >
                          {"Advanced TikTok & Facebook Ads Training:"}
                        </span>
                      </React.Fragment>
                    </div>
                  ),
                  value: args.children,
                  className: classNames(sty.slotTargetChildren)
                })}
              </div>
              {true ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__s3WPl
                  )}
                >
                  {"Enter some text"}
                </div>
              ) : null}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___1IN6C)}>
              <div className={classNames(projectcss.all, sty.freeBox__iZMrk)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__gkfaE)}
                  displayHeight={"24px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"24px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/zendrop/images/downloadsvg2.svg",
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zOUhB
                  )}
                >
                  {"Instant Access"}
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__xR7Sx)}>
              <div className={classNames(projectcss.all, sty.freeBox___4Kfex)}>
                <div className={classNames(projectcss.all, sty.freeBox__c2XmP)}>
                  {p.renderPlasmicSlot({
                    defaultContents: "Price: $9,997+",
                    value: args.slot,
                    className: classNames(sty.slotTargetSlot)
                  })}
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__gappv)}>
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link___4WEnO
                )}
                component={Link}
                platform={"nextjs"}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hvVcU
                      )}
                    >
                      {"\ud83d\udc49  FREE  \ud83d\udc48"}
                    </div>
                  ),
                  value: args.slot2
                })}
              </p.PlasmicLink>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__jcvpC)}>
            <div className={classNames(projectcss.all, sty.freeBox__zRqxj)}>
              <div className={classNames(projectcss.all, sty.freeBox__k5LDi)}>
                {p.renderPlasmicSlot({
                  defaultContents:
                    "Learn How to Generate Profitable Traffic for Any Store With Zendrop Academy.",
                  value: args.slot3
                })}
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__ss3ET)}>
            <div className={classNames(projectcss.all, sty.freeBox__gvOeY)}>
              <div className={classNames(projectcss.all, sty.freeBox__x3ZRb)}>
                <div className={classNames(projectcss.all, sty.freeBox__u9Svm)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vfAcR)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__sccW3)}
                      displayHeight={"80px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"120px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/zendrop/images/timBurdTalkpng.png",
                        fullWidth: 240,
                        fullHeight: 160,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__k2Gxs)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tybo9
                      )}
                    >
                      {"Tim Burd Mastermind Presentation"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sUFu)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cXpco)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hgLa0
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: "Price: $2,997",
                          value: args.slot4,
                          className: classNames(sty.slotTargetSlot4)
                        })}
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___4PeWf)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bs68A)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__cFghj)}
                      displayHeight={"80px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"120px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/zendrop/images/justinWoolpng.png",
                        fullWidth: 240,
                        fullHeight: 160,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___5Vjwm)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__auyGr
                      )}
                    >
                      {"Justin Wool Mastermind Presentation"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tzTU)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__jsXjW)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zUvh
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: "Price: $2,997",
                          value: args.slot5,
                          className: classNames(sty.slotTargetSlot5)
                        })}
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___95TTd)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qlD56)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__xqk6K)}
                      displayHeight={"80px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"120px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/zendrop/images/academy600450Px800450Px6Png.png",
                        fullWidth: 798,
                        fullHeight: 449,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kCv2A)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fkuf
                      )}
                    >
                      {"Plus 50+ High-Value Modules"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fZuI)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2Ssfp
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ifqvI
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: "Price: $2,997",
                          value: args.slot6,
                          className: classNames(sty.slotTargetSlot6)
                        })}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
        <div
          data-plasmic-name={"mobile"}
          data-plasmic-override={overrides.mobile}
          className={classNames(projectcss.all, sty.mobile)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__xlRj4)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__krg4I)}>
                {true ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___5OLhD)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                  />
                ) : null}
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__bosYp)}>
              <div className={classNames(projectcss.all, sty.freeBox__drJpm)}>
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ltCD
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#636363" }}
                        >
                          {"Advanced TikTok & Facebook Ads Training:"}
                        </span>
                      </React.Fragment>
                    </div>
                  ),
                  value: args.children2,
                  className: classNames(sty.slotTargetChildren2)
                })}
              </div>
              {true ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7PFqq
                  )}
                >
                  {"Enter some text"}
                </div>
              ) : null}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__j25Au)}>
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__bODlX
                )}
                component={Link}
                platform={"nextjs"}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tXh3O
                      )}
                    >
                      {"\ud83d\udc49  FREE  \ud83d\udc48"}
                    </div>
                  ),
                  value: args.slot8
                })}
              </p.PlasmicLink>
              <div className={classNames(projectcss.all, sty.freeBox___4Buw4)}>
                <div className={classNames(projectcss.all, sty.freeBox__vw2Aj)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pGor)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "Price: $9,997+",
                      value: args.slot7,
                      className: classNames(sty.slotTargetSlot7)
                    })}
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__yQyJq)}>
            <div className={classNames(projectcss.all, sty.freeBox__dUxw3)}>
              <div className={classNames(projectcss.all, sty.freeBox__ePuaF)}>
                {p.renderPlasmicSlot({
                  defaultContents:
                    "Learn How to Generate Profitable Traffic for Any Store With Zendrop Academy.",
                  value: args.slot9
                })}
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__uEioa)}>
            <div className={classNames(projectcss.all, sty.freeBox__k2My0)}>
              <div className={classNames(projectcss.all, sty.freeBox__ifHOr)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__oyoB1)}
                  displayHeight={"24px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"24px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/zendrop/images/downloadsvg2.svg",
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bfeTv
                  )}
                >
                  {"Instant Access"}
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__enqE)}>
            <div className={classNames(projectcss.all, sty.freeBox___9OWe9)}>
              <div className={classNames(projectcss.all, sty.freeBox__cdLyt)}>
                <div className={classNames(projectcss.all, sty.freeBox__kSmE)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___0LTij)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__o8YHe)}
                      displayHeight={"80px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"120px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/zendrop/images/timBurdTalkpng.png",
                        fullWidth: 240,
                        fullHeight: 160,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___7A9Tz)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dBuxN
                      )}
                    >
                      {"Tim Burd Mastermind Presentation"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___07A3F
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gm4SI
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__caAjP
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "Price: $2,997",
                            value: args.slot10,
                            className: classNames(sty.slotTargetSlot10)
                          })}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__ojBuA)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__c41E4)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__wYo)}
                      displayHeight={"80px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"120px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/zendrop/images/justinWoolpng.png",
                        fullWidth: 240,
                        fullHeight: 160,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___8Agvk)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xvh
                      )}
                    >
                      {"Justin Wool Mastermind Presentation"}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qg3VF)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__r5VnG
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__p4HPw
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "Price: $2,997",
                            value: args.slot11,
                            className: classNames(sty.slotTargetSlot11)
                          })}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__fskjG)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hD5D)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__hfRlQ)}
                      displayHeight={"80px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"120px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/zendrop/images/academy600450Px800450Px6Png.png",
                        fullWidth: 798,
                        fullHeight: 449,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kwo4Z)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vpmdu
                      )}
                    >
                      {"Plus 50+ High-Value Modules"}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__hGrWn)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1NQl
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__etrpN
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "Price: $2,997",
                            value: args.slot12,
                            className: classNames(sty.slotTargetSlot12)
                          })}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "desktop", "mobile"],
  desktop: ["desktop"],
  mobile: ["mobile"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  desktop: "div";
  mobile: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicValueStack2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicValueStack2__VariantsArgs;
    args?: PlasmicValueStack2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicValueStack2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicValueStack2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicValueStack2__ArgProps,
          internalVariantPropNames: PlasmicValueStack2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicValueStack2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicValueStack2";
  } else {
    func.displayName = `PlasmicValueStack2.${nodeName}`;
  }
  return func;
}

export const PlasmicValueStack2 = Object.assign(
  // Top-level PlasmicValueStack2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    desktop: makeNodeComponent("desktop"),
    mobile: makeNodeComponent("mobile"),

    // Metadata about props expected for PlasmicValueStack2
    internalVariantProps: PlasmicValueStack2__VariantProps,
    internalArgProps: PlasmicValueStack2__ArgProps
  }
);

export default PlasmicValueStack2;
/* prettier-ignore-end */
